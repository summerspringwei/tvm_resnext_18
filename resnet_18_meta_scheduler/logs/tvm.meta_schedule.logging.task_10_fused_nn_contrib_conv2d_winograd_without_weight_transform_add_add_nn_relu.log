2023-11-10 23:34:08 [INFO] [task_scheduler.cc:160] Initializing Task #10: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu"
2023-11-10 23:34:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(196), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2023-11-10 23:34:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-11-10 23:34:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10752)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 32, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 7])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 8, 8])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2023-11-10 23:34:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10752)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 32, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 7])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 8, 8])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
l120 = sch.fuse(l91, preserve_unit_iters=True)
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v121 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v121)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b3)
l128 = sch.fuse(l122, l123, l124, l125, preserve_unit_iters=True)
v129 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l130, l131 = sch.split(loop=l128, factors=[None, v129], preserve_unit_iters=True)
sch.bind(loop=l130, thread_axis="blockIdx.x")
sch.bind(loop=l131, thread_axis="threadIdx.x")
2023-11-10 23:34:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10752)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(24576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(32) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 32, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 7])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 8, 8])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
l120 = sch.fuse(l91, preserve_unit_iters=True)
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v121 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v121)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b3)
l128 = sch.fuse(l122, l123, l124, l125, preserve_unit_iters=True)
v129 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l130, l131 = sch.split(loop=l128, factors=[None, v129], preserve_unit_iters=True)
sch.bind(loop=l130, thread_axis="blockIdx.x")
sch.bind(loop=l131, thread_axis="threadIdx.x")
2023-11-10 23:45:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-10 23:45:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-11-10 23:45:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:45:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:46:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:46:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:46:17 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2023-11-10 23:46:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:47:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:47:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:47:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-10 23:48:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9984  0.9981  0.9969  0.9961  0.9950  0.9933  0.9930  0.9921  0.9903  0.9897  0.9896  0.9888  0.9886  0.9875  0.9874
[17 : 32]:	0.9872  0.9871  0.9870  0.9866  0.9855  0.9850  0.9837  0.9834  0.9810  0.9810  0.9798  0.9786  0.9783  0.9781  0.9780  0.9779
[33 : 48]:	0.9770  0.9759  0.9759  0.9757  0.9754  0.9750  0.9738  0.9729  0.9725  0.9721  0.9716  0.9711  0.9701  0.9696  0.9695  0.9691
[49 : 64]:	0.9690  0.9688  0.9684  0.9672  0.9661  0.9650  0.9646  0.9643  0.9635  0.9626  0.9616  0.9604  0.9602  0.9602  0.9591  0.9576
2023-11-10 23:48:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-10 23:48:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #1: GFLOPs: 2096.5899. Time: 61.4579 us. Best GFLOPs: 2096.5899
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #2: GFLOPs: 1014.9493. Time: 126.9541 us. Best GFLOPs: 2096.5899
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #3: GFLOPs: 69.5916. Time: 1851.5450 us. Best GFLOPs: 2096.5899
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #4: GFLOPs: 4247.6975. Time: 30.3345 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #5: GFLOPs: 2456.4202. Time: 52.4552 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #6: GFLOPs: 57.4867. Time: 2241.4222 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #7: GFLOPs: 11.0095. Time: 11703.7514 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #8: GFLOPs: 166.5512. Time: 773.6478 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #9: GFLOPs: 94.0343. Time: 1370.2663 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #10: GFLOPs: 666.2832. Time: 193.3892 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #11: GFLOPs: 2667.8826. Time: 48.2975 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #12: GFLOPs: 55.8182. Time: 2308.4217 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #13: GFLOPs: 3359.9593. Time: 38.3493 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #14: GFLOPs: 877.1080. Time: 146.9055 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #15: GFLOPs: 2219.6012. Time: 58.0519 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #16: GFLOPs: 39.1768. Time: 3288.9889 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #17: GFLOPs: 1535.7417. Time: 83.9021 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(9), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(3) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 7])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
l120 = sch.fuse(l91, preserve_unit_iters=True)
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l120, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v121 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v121)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b3)
l128 = sch.fuse(l122, l123, l124, l125, preserve_unit_iters=True)
v129 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l130, l131 = sch.split(loop=l128, factors=[None, v129], preserve_unit_iters=True)
sch.bind(loop=l130, thread_axis="blockIdx.x")
sch.bind(loop=l131, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l132, l133, l134, l135, l136 = sch.get_loops(block=b98)
l137, l138 = sch.split(loop=l136, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l138, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b151)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b153)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b155)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #19: GFLOPs: 3476.6174. Time: 37.0625 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #20: GFLOPs: 95.8044. Time: 1344.9489 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #21: GFLOPs: 3087.5972. Time: 41.7321 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #22: GFLOPs: 207.8718. Time: 619.8627 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #23: GFLOPs: 1211.1453. Time: 106.3885 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #24: GFLOPs: 214.9822. Time: 599.3610 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #25: GFLOPs: 1168.7108. Time: 110.2514 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #26: GFLOPs: 1870.9205. Time: 68.8709 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #27: GFLOPs: 33.4465. Time: 3852.4848 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #28: GFLOPs: 189.9777. Time: 678.2478 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #29: GFLOPs: 90.1025. Time: 1430.0599 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #30: GFLOPs: 129.3962. Time: 995.7944 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #31: GFLOPs: 72.9661. Time: 1765.9149 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #32: GFLOPs: 3199.5545. Time: 40.2718 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #33: GFLOPs: 2042.8350. Time: 63.0751 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #34: GFLOPs: 26.3252. Time: 4894.6224 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(6), T.int64(4), T.int64(4)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_3_init * T.int64(6) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3_init * T.int64(4) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(384) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(64), ci_0)
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1152))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(6), T.int64(4), T.int64(4)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3 * T.int64(4) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(4), T.int64(28)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) + ax0)
                            v1 = T.axis.spatial(T.int64(6), ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 8, 2, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 1, 7, 7, 4])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #36: GFLOPs: 3677.7741. Time: 35.0353 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #37: GFLOPs: 93.3235. Time: 1380.7027 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #38: GFLOPs: 1618.2385. Time: 79.6248 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #39: GFLOPs: 1414.8180. Time: 91.0732 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #40: GFLOPs: 2221.8765. Time: 57.9924 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #41: GFLOPs: 2354.4889. Time: 54.7261 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #42: GFLOPs: 2218.3515. Time: 58.0846 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #43: GFLOPs: 4160.3344. Time: 30.9715 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #44: GFLOPs: 4242.8935. Time: 30.3689 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #45: GFLOPs: 1044.6650. Time: 123.3429 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #46: GFLOPs: 96.7576. Time: 1331.6986 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #47: GFLOPs: 61.4239. Time: 2097.7494 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #48: GFLOPs: 256.6107. Time: 502.1300 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #49: GFLOPs: 151.0004. Time: 853.3218 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #50: GFLOPs: 73.8107. Time: 1745.7082 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #51: GFLOPs: 102.1229. Time: 1261.7344 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #52: GFLOPs: 13.8030. Time: 9335.0635 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #53: GFLOPs: 951.9989. Time: 135.3489 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #54: GFLOPs: 3402.9883. Time: 37.8644 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #55: GFLOPs: 90.4872. Time: 1423.9802 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #56: GFLOPs: 2316.1566. Time: 55.6318 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #57: GFLOPs: 1157.3340. Time: 111.3352 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #58: GFLOPs: 211.1362. Time: 610.2790 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #59: GFLOPs: 1.7095. Time: 75372.5433 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #60: GFLOPs: 1126.6254. Time: 114.3698 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #61: GFLOPs: 1.3854. Time: 93008.2090 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #62: GFLOPs: 1058.9388. Time: 121.6803 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #63: GFLOPs: 950.9685. Time: 135.4955 us. Best GFLOPs: 4247.6975
2023-11-11 00:24:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #64: GFLOPs: 1344.0464. Time: 95.8687 us. Best GFLOPs: 4247.6975
2023-11-11 01:06:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 01:06:57 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2023-11-11 01:07:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 438 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:07:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 878 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:07:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1318 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:07:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1752 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:07:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 2192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:07:38 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2023-11-11 01:08:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:08:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:09:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:09:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 01:09:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8101  1.7938  1.7436  1.7350  1.7342  1.7284  1.7273  1.7222  1.7134  1.7114  1.7095  1.6999  1.6985  1.6759  1.6702  1.6604
[17 : 32]:	1.6481  1.6479  1.6455  1.6413  1.6360  1.6306  1.5680  1.5359  1.5345  1.5344  1.5314  1.5298  1.5225  1.5033  1.4577  1.4563
[33 : 48]:	1.4471  1.4440  1.4440  1.4384  1.4368  1.4363  1.4343  1.4289  1.4282  1.4260  1.4205  1.4180  1.4132  1.3724  1.3587  1.3495
[49 : 64]:	1.3434  1.3332  1.3331  1.3283  1.3238  1.3215  1.3194  1.2985  1.2973  1.2744  1.2744  1.2699  1.2664  1.2573  1.2548  1.2487
2023-11-11 01:09:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 01:09:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #65: GFLOPs: 2536.1069. Time: 50.8070 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #66: GFLOPs: 2527.6239. Time: 50.9775 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #67: GFLOPs: 2224.4855. Time: 57.9244 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #68: GFLOPs: 2249.3175. Time: 57.2849 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #69: GFLOPs: 2281.6074. Time: 56.4742 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #70: GFLOPs: 2298.0150. Time: 56.0710 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #71: GFLOPs: 2220.7478. Time: 58.0219 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #72: GFLOPs: 2295.7567. Time: 56.1261 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #73: GFLOPs: 1851.1395. Time: 69.6068 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #74: GFLOPs: 2293.2654. Time: 56.1871 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #75: GFLOPs: 2299.7421. Time: 56.0289 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #76: GFLOPs: 1805.6304. Time: 71.3612 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #77: GFLOPs: 1851.2470. Time: 69.6028 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #78: GFLOPs: 2327.9444. Time: 55.3501 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #79: GFLOPs: 1056.0772. Time: 122.0100 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #80: GFLOPs: 1881.3219. Time: 68.4901 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #81: GFLOPs: 1851.1598. Time: 69.6061 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #82: GFLOPs: 1860.8986. Time: 69.2418 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #83: GFLOPs: 1880.7352. Time: 68.5115 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #84: GFLOPs: 4138.7357. Time: 31.1332 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #85: GFLOPs: 2308.9568. Time: 55.8053 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #86: GFLOPs: 2535.1997. Time: 50.8252 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #87: GFLOPs: 3945.7772. Time: 32.6557 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #88: GFLOPs: 1284.4858. Time: 100.3140 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #89: GFLOPs: 3930.6176. Time: 32.7816 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #90: GFLOPs: 1269.4073. Time: 101.5056 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #91: GFLOPs: 2930.8772. Time: 43.9636 us. Best GFLOPs: 4247.6975
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #92: GFLOPs: 4534.1302. Time: 28.4182 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #93: GFLOPs: 1577.9752. Time: 81.6565 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #94: GFLOPs: 2624.8856. Time: 49.0886 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #95: GFLOPs: 3925.4799. Time: 32.8245 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #96: GFLOPs: 1068.2339. Time: 120.6215 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #97: GFLOPs: 2833.3165. Time: 45.4774 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #98: GFLOPs: 2698.9473. Time: 47.7416 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #99: GFLOPs: 2698.0802. Time: 47.7569 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #100: GFLOPs: 1389.2651. Time: 92.7483 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #101: GFLOPs: 2297.9386. Time: 56.0729 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #102: GFLOPs: 2567.0990. Time: 50.1936 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #103: GFLOPs: 1966.6079. Time: 65.5199 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #104: GFLOPs: 1930.7633. Time: 66.7363 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #105: GFLOPs: 2321.7482. Time: 55.4978 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #106: GFLOPs: 1556.8851. Time: 82.7627 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #107: GFLOPs: 2298.0869. Time: 56.0692 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #108: GFLOPs: 1966.2893. Time: 65.5305 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #109: GFLOPs: 1204.4344. Time: 106.9813 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #110: GFLOPs: 1740.0390. Time: 74.0512 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #111: GFLOPs: 1571.6866. Time: 81.9832 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #112: GFLOPs: 1994.2142. Time: 64.6129 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #113: GFLOPs: 925.7584. Time: 139.1853 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #114: GFLOPs: 1931.2009. Time: 66.7212 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #115: GFLOPs: 2446.7672. Time: 52.6621 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #116: GFLOPs: 1069.8559. Time: 120.4386 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #117: GFLOPs: 2632.0108. Time: 48.9557 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #118: GFLOPs: 1742.1955. Time: 73.9595 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #119: GFLOPs: 2276.4865. Time: 56.6012 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #120: GFLOPs: 1754.7803. Time: 73.4291 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #121: GFLOPs: 4527.7715. Time: 28.4581 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #122: GFLOPs: 4528.8482. Time: 28.4514 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #123: GFLOPs: 4482.4104. Time: 28.7461 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #124: GFLOPs: 2438.4723. Time: 52.8413 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #125: GFLOPs: 1965.8569. Time: 65.5449 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #126: GFLOPs: 2757.3802. Time: 46.7299 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #127: GFLOPs: 49.6816. Time: 2593.5557 us. Best GFLOPs: 4534.1302
2023-11-11 01:10:27 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #128: GFLOPs: 1742.7468. Time: 73.9361 us. Best GFLOPs: 4534.1302
2023-11-11 02:01:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 02:01:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 02:01:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:01:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:01:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:01:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1590 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:01:52 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2023-11-11 02:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:02:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:03:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:03:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 02:03:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6153  1.4042  1.3336  1.3239  1.3233  1.3125  1.3054  1.2769  1.2712  1.2158  1.1832  1.1720  1.1611  1.1609  1.1534  1.1380
[17 : 32]:	1.1364  1.1353  1.1318  1.1236  1.1194  1.1149  1.1038  1.1026  1.1026  1.1000  1.0962  1.0917  1.0904  1.0865  1.0860  1.0830
[33 : 48]:	1.0830  1.0817  1.0810  1.0808  1.0802  1.0795  1.0779  1.0709  1.0704  1.0687  1.0649  1.0637  1.0633  1.0628  1.0559  1.0513
[49 : 64]:	1.0499  1.0362  1.0226  1.0220  1.0220  1.0135  1.0127  1.0126  1.0119  1.0098  1.0086  1.0042  1.0038  1.0031  0.9972  0.9963
2023-11-11 02:03:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 02:03:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #129: GFLOPs: 2034.9774. Time: 63.3186 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #130: GFLOPs: 1365.5049. Time: 94.3621 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #131: GFLOPs: 1548.8423. Time: 83.1924 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #132: GFLOPs: 1179.2974. Time: 109.2616 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #133: GFLOPs: 1934.7653. Time: 66.5982 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #134: GFLOPs: 2040.2508. Time: 63.1550 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #135: GFLOPs: 263.7887. Time: 488.4666 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #136: GFLOPs: 980.3227. Time: 131.4383 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #137: GFLOPs: 271.2293. Time: 475.0665 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #138: GFLOPs: 1776.2933. Time: 72.5398 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #139: GFLOPs: 264.6671. Time: 486.8455 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #140: GFLOPs: 1111.1614. Time: 115.9615 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #141: GFLOPs: 1110.8965. Time: 115.9892 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #142: GFLOPs: 1112.2861. Time: 115.8443 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #143: GFLOPs: 1486.9498. Time: 86.6552 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #144: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home2/xiachunwei/Software/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  292: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}>(tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  291: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  290: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  289: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  288: tvm::transform::Pass::operator()(tvm::IRModule) const
  287: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  286: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  285: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  284: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  283: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  282: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  281: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  280: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  279: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  276: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  275: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  274: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  273: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  271: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  270: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  269: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  268: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  265: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  264: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  262: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  261: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  259: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  258: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  250: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  249: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  248: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  247: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  246: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  238: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  237: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  236: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  222: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  219: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  218: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  214: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  211: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  200: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  193: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  192: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  191: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  190: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  189: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  187: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  186: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  182: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  174: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  171: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  170: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  169: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  166: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  155: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  151: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  150: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  149: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  148: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  147: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  135: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  131: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  118: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  112: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  110: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  109: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  103: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  93: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  89: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  87: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  86: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  80: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  74: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  68: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  64: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  45: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  41: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  30: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  29: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  26: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  22: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  19: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  18: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  17: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  16: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  15: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  10: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  9: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  8: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  7: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  6: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home2/xiachunwei/Software/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(2)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(64)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3072))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3072) // T.int64(512))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(32) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 4, 2, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[98, 1, 2, 1, 1])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[2, 4, 8])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 72, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 72, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #145: GFLOPs: 1305.1108. Time: 98.7288 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #146: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home2/xiachunwei/Software/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  292: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}>(tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  291: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  290: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  289: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  288: tvm::transform::Pass::operator()(tvm::IRModule) const
  287: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  286: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  285: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  284: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  283: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  282: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  281: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  280: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  279: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  276: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  275: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  274: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  273: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  271: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  270: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  269: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  268: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  265: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  264: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  262: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  261: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  259: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  258: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  250: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  249: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  248: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  247: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  246: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  241: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  240: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  238: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  237: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  236: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  233: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  232: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  231: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  225: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  224: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  223: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  222: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  221: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  220: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  219: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  218: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  214: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  211: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  200: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  195: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  194: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  193: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  192: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  191: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  190: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  189: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  187: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  186: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  182: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  177: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  174: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  171: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  170: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  169: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  166: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  163: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  162: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  155: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  151: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  150: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  149: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  148: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  147: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  143: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  142: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  135: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  131: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  118: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  114: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  113: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  112: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  110: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  109: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  105: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  104: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  103: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  99: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  98: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  93: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  89: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  87: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  86: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  80: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  74: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  68: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  64: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  61: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  60: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  45: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  41: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  38: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  37: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  30: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  29: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  26: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  22: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  19: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  18: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  17: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  16: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  15: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  10: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  9: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  8: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  7: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  6: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home2/xiachunwei/Software/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(2)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3072))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3072) // T.int64(512))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(32) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(392) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(392) // T.int64(98) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 4, 2, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[98, 1, 2, 1, 1])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[2, 4, 8])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 72, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 72, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #147: GFLOPs: 2340.6777. Time: 55.0490 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #148: GFLOPs: 1603.0125. Time: 80.3811 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #149: GFLOPs: 1989.3873. Time: 64.7697 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #150: GFLOPs: 2009.6329. Time: 64.1172 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #151: GFLOPs: 685.7876. Time: 187.8890 us. Best GFLOPs: 4534.1302
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #152: GFLOPs: 5000.6062. Time: 25.7673 us. Best GFLOPs: 5000.6062
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #153: GFLOPs: 4821.0558. Time: 26.7269 us. Best GFLOPs: 5000.6062
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #154: GFLOPs: 1629.8935. Time: 79.0555 us. Best GFLOPs: 5000.6062
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #155: GFLOPs: 4836.6676. Time: 26.6406 us. Best GFLOPs: 5000.6062
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #156: GFLOPs: 5322.3326. Time: 24.2097 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #157: GFLOPs: 4501.2439. Time: 28.6259 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #158: GFLOPs: 1629.6308. Time: 79.0682 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #159: GFLOPs: 4508.6468. Time: 28.5789 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #160: GFLOPs: 4474.4671. Time: 28.7972 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #161: GFLOPs: 4505.3687. Time: 28.5996 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #162: GFLOPs: 1117.3822. Time: 115.3159 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #163: GFLOPs: 1534.6852. Time: 83.9599 us. Best GFLOPs: 5322.3326
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #164: GFLOPs: 5375.5285. Time: 23.9701 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #165: GFLOPs: 4842.6886. Time: 26.6075 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #166: GFLOPs: 4517.7215. Time: 28.5214 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #167: GFLOPs: 5320.3304. Time: 24.2188 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #168: GFLOPs: 1118.3030. Time: 115.2210 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #169: GFLOPs: 1977.3842. Time: 65.1628 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #170: GFLOPs: 4853.2215. Time: 26.5498 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #171: GFLOPs: 1931.0646. Time: 66.7259 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #172: GFLOPs: 1547.2713. Time: 83.2769 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #173: GFLOPs: 1449.1845. Time: 88.9134 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #174: GFLOPs: 361.4568. Time: 356.4795 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #175: GFLOPs: 4811.1787. Time: 26.7818 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #176: GFLOPs: 2121.0032. Time: 60.7505 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #177: GFLOPs: 4426.7943. Time: 29.1073 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #178: GFLOPs: 4998.3606. Time: 25.7788 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #179: GFLOPs: 4416.6582. Time: 29.1741 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #180: GFLOPs: 4739.3820. Time: 27.1875 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #181: GFLOPs: 4664.2855. Time: 27.6252 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #182: GFLOPs: 4419.1903. Time: 29.1574 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #183: GFLOPs: 4206.7735. Time: 30.6296 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #184: GFLOPs: 4441.3453. Time: 29.0119 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #185: GFLOPs: 209.6128. Time: 614.7141 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #186: GFLOPs: 4440.2668. Time: 29.0190 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #187: GFLOPs: 4606.7828. Time: 27.9701 us. Best GFLOPs: 5375.5285
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #188: GFLOPs: 5429.2133. Time: 23.7331 us. Best GFLOPs: 5429.2133
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #189: GFLOPs: 2049.1402. Time: 62.8810 us. Best GFLOPs: 5429.2133
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #190: GFLOPs: 1625.1574. Time: 79.2858 us. Best GFLOPs: 5429.2133
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #191: GFLOPs: 2386.9332. Time: 53.9822 us. Best GFLOPs: 5429.2133
2023-11-11 02:04:28 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #192: GFLOPs: 2120.7640. Time: 60.7573 us. Best GFLOPs: 5429.2133
2023-11-11 03:10:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 03:10:33 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 03:10:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:10:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:10:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:11:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:11:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1990 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:11:12 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2023-11-11 03:11:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:12:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:12:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:13:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:13:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5136  1.2593  1.2418  1.2317  1.2294  1.2294  1.0116  1.0074  0.9992  0.9964  0.9963  0.9940  0.9924  0.9911  0.9884  0.9871
[17 : 32]:	0.9832  0.9812  0.9798  0.9791  0.9765  0.9765  0.9762  0.9746  0.9724  0.9714  0.9714  0.9701  0.9684  0.9681  0.9667  0.9662
[33 : 48]:	0.9633  0.9631  0.9624  0.9620  0.9616  0.9614  0.9608  0.9599  0.9591  0.9584  0.9580  0.9575  0.9572  0.9562  0.9561  0.9552
[49 : 64]:	0.9550  0.9548  0.9545  0.9543  0.9526  0.9519  0.9517  0.9516  0.9515  0.9511  0.9507  0.9487  0.9482  0.9477  0.9475  0.9473
2023-11-11 03:13:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 03:13:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #193: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(36), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(4)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3136))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 64, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 7, 2, 14, 1])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[4, 1, 16])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 128], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #194: GFLOPs: 2334.1046. Time: 55.2040 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #195: GFLOPs: 3366.5939. Time: 38.2737 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #196: GFLOPs: 3380.0160. Time: 38.1217 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #197: GFLOPs: 3345.7365. Time: 38.5123 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #198: GFLOPs: 3339.6793. Time: 38.5821 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #199: GFLOPs: 4834.7986. Time: 26.6509 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #200: GFLOPs: 5170.4875. Time: 24.9207 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #201: GFLOPs: 5220.3158. Time: 24.6828 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #202: GFLOPs: 1480.1292. Time: 87.0545 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #203: GFLOPs: 5067.3624. Time: 25.4278 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #204: GFLOPs: 5180.3774. Time: 24.8731 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #205: GFLOPs: 5193.3176. Time: 24.8111 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #206: GFLOPs: 5194.3763. Time: 24.8061 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #207: GFLOPs: 5062.9099. Time: 25.4502 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #208: GFLOPs: 4959.1029. Time: 25.9829 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #209: GFLOPs: 5292.3639. Time: 24.3468 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #210: GFLOPs: 2497.4655. Time: 51.5931 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #211: GFLOPs: 4360.9001. Time: 29.5471 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #212: GFLOPs: 5034.5888. Time: 25.5933 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #213: GFLOPs: 5257.7989. Time: 24.5068 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #214: GFLOPs: 5225.8110. Time: 24.6568 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #215: GFLOPs: 5099.6644. Time: 25.2668 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #216: GFLOPs: 4571.0953. Time: 28.1884 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #217: GFLOPs: 2065.5188. Time: 62.3824 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #218: GFLOPs: 4713.0938. Time: 27.3391 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #219: GFLOPs: 5294.7882. Time: 24.3356 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #220: GFLOPs: 4262.9255. Time: 30.2262 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #221: GFLOPs: 5031.0665. Time: 25.6113 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #222: GFLOPs: 5172.7119. Time: 24.9099 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #223: GFLOPs: 5229.2710. Time: 24.6405 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #224: GFLOPs: 5218.0756. Time: 24.6934 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #225: GFLOPs: 5414.0833. Time: 23.7994 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #226: GFLOPs: 2143.0474. Time: 60.1256 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #227: GFLOPs: 4672.7018. Time: 27.5755 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #228: GFLOPs: 4364.8082. Time: 29.5206 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #229: GFLOPs: 5368.2318. Time: 24.0027 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #230: GFLOPs: 1749.6401. Time: 73.6448 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #231: GFLOPs: 5158.7034. Time: 24.9776 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #232: GFLOPs: 4364.9828. Time: 29.5195 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #233: GFLOPs: 5291.8930. Time: 24.3489 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #234: GFLOPs: 5275.3746. Time: 24.4252 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #235: GFLOPs: 4667.7911. Time: 27.6045 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #236: GFLOPs: 5185.9739. Time: 24.8462 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #237: GFLOPs: 4825.4523. Time: 26.7026 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #238: GFLOPs: 5370.2615. Time: 23.9936 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #239: GFLOPs: 4798.8419. Time: 26.8506 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #240: GFLOPs: 4895.4852. Time: 26.3206 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #241: GFLOPs: 5150.0002. Time: 25.0198 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #242: GFLOPs: 4779.7227. Time: 26.9580 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #243: GFLOPs: 5142.2851. Time: 25.0573 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #244: GFLOPs: 5295.7112. Time: 24.3314 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #245: GFLOPs: 4678.3713. Time: 27.5421 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #246: GFLOPs: 2558.1572. Time: 50.3691 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #247: GFLOPs: 4417.4570. Time: 29.1688 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #248: GFLOPs: 5287.4035. Time: 24.3696 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #249: GFLOPs: 4659.4852. Time: 27.6537 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #250: GFLOPs: 5393.6900. Time: 23.8894 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #251: GFLOPs: 2210.3121. Time: 58.2958 us. Best GFLOPs: 5429.2133
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #252: GFLOPs: 5711.1264. Time: 22.5616 us. Best GFLOPs: 5711.1264
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #253: GFLOPs: 4527.8261. Time: 28.4578 us. Best GFLOPs: 5711.1264
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #254: GFLOPs: 238.8401. Time: 539.4905 us. Best GFLOPs: 5711.1264
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #255: GFLOPs: 2943.7477. Time: 43.7714 us. Best GFLOPs: 5711.1264
2023-11-11 03:14:00 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #256: GFLOPs: 1999.8790. Time: 64.4299 us. Best GFLOPs: 5711.1264
2023-11-11 03:53:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 03:53:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 03:54:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:54:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:54:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1189 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:54:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:54:30 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2023-11-11 03:54:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 172 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:55:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:55:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:56:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 03:56:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2008  1.1928  1.1881  1.1805  1.1678  1.0279  1.0235  1.0074  1.0020  0.9871  0.9835  0.9809  0.9809  0.9786  0.9781  0.9780
[17 : 32]:	0.9770  0.9754  0.9742  0.9696  0.9644  0.9634  0.9628  0.9566  0.9561  0.9545  0.9520  0.9489  0.9488  0.9467  0.9460  0.9448
[33 : 48]:	0.9404  0.9403  0.9383  0.9333  0.9300  0.9299  0.9292  0.9281  0.9274  0.9269  0.9266  0.9266  0.9254  0.9253  0.9253  0.9234
[49 : 64]:	0.9234  0.9230  0.9228  0.9228  0.9216  0.9204  0.9203  0.9199  0.9197  0.9189  0.9188  0.9185  0.9185  0.9184  0.9173  0.9173
2023-11-11 03:56:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 03:56:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #257: GFLOPs: 1970.8203. Time: 65.3799 us. Best GFLOPs: 5711.1264
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #258: GFLOPs: 1948.1964. Time: 66.1391 us. Best GFLOPs: 5711.1264
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #259: GFLOPs: 2016.6922. Time: 63.8927 us. Best GFLOPs: 5711.1264
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #260: GFLOPs: 2018.0764. Time: 63.8489 us. Best GFLOPs: 5711.1264
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #261: GFLOPs: 2073.4258. Time: 62.1445 us. Best GFLOPs: 5711.1264
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #262: GFLOPs: 5852.8657. Time: 22.0152 us. Best GFLOPs: 5852.8657
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #263: GFLOPs: 5776.7398. Time: 22.3053 us. Best GFLOPs: 5852.8657
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #264: GFLOPs: 1798.6087. Time: 71.6398 us. Best GFLOPs: 5852.8657
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #265: GFLOPs: 1746.7211. Time: 73.7679 us. Best GFLOPs: 5852.8657
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #266: GFLOPs: 1751.5953. Time: 73.5626 us. Best GFLOPs: 5852.8657
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #267: GFLOPs: 5901.5365. Time: 21.8336 us. Best GFLOPs: 5901.5365
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #268: GFLOPs: 6047.9798. Time: 21.3050 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #269: GFLOPs: 4792.3774. Time: 26.8869 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #270: GFLOPs: 5826.6391. Time: 22.1143 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #271: GFLOPs: 5889.7283. Time: 21.8774 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #272: GFLOPs: 5789.0795. Time: 22.2578 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #273: GFLOPs: 5454.7049. Time: 23.6222 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #274: GFLOPs: 2227.0936. Time: 57.8566 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #275: GFLOPs: 5852.4532. Time: 22.0167 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #276: GFLOPs: 5837.5761. Time: 22.0729 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #277: GFLOPs: 5835.8200. Time: 22.0795 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #278: GFLOPs: 5859.3165. Time: 21.9910 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #279: GFLOPs: 5675.3333. Time: 22.7039 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #280: GFLOPs: 5054.3364. Time: 25.4934 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #281: GFLOPs: 5870.2570. Time: 21.9500 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #282: GFLOPs: 5293.7493. Time: 24.3404 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #283: GFLOPs: 4855.9693. Time: 26.5348 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #284: GFLOPs: 5309.0727. Time: 24.2701 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #285: GFLOPs: 5779.4424. Time: 22.2949 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #286: GFLOPs: 5679.5035. Time: 22.6872 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #287: GFLOPs: 5907.5378. Time: 21.8115 us. Best GFLOPs: 6047.9798
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #288: GFLOPs: 6111.2078. Time: 21.0845 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #289: GFLOPs: 5271.5612. Time: 24.4428 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #290: GFLOPs: 5776.7387. Time: 22.3053 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #291: GFLOPs: 5256.3440. Time: 24.5136 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #292: GFLOPs: 5352.8057. Time: 24.0719 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #293: GFLOPs: 4352.9963. Time: 29.6008 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #294: GFLOPs: 4673.1734. Time: 27.5727 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #295: GFLOPs: 5272.6471. Time: 24.4378 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #296: GFLOPs: 5346.8646. Time: 24.0986 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #297: GFLOPs: 5327.6358. Time: 24.1856 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #298: GFLOPs: 5005.9778. Time: 25.7396 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #299: GFLOPs: 5295.1422. Time: 24.3340 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #300: GFLOPs: 5293.6672. Time: 24.3408 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #301: GFLOPs: 5326.3513. Time: 24.1914 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #302: GFLOPs: 5388.7509. Time: 23.9113 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #303: GFLOPs: 5437.3055. Time: 23.6978 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #304: GFLOPs: 5249.0898. Time: 24.5475 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #305: GFLOPs: 5352.5174. Time: 24.0732 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #306: GFLOPs: 5287.4737. Time: 24.3693 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #307: GFLOPs: 5176.1193. Time: 24.8935 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #308: GFLOPs: 5349.0974. Time: 24.0885 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #309: GFLOPs: 5436.7019. Time: 23.7004 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #310: GFLOPs: 5508.3810. Time: 23.3920 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #311: GFLOPs: 5361.9709. Time: 24.0307 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #312: GFLOPs: 1852.8612. Time: 69.5422 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #313: GFLOPs: 5212.4956. Time: 24.7198 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #314: GFLOPs: 5360.3087. Time: 24.0382 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #315: GFLOPs: 5307.6204. Time: 24.2768 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #316: GFLOPs: 5443.1795. Time: 23.6722 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #317: GFLOPs: 5465.3579. Time: 23.5761 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #318: GFLOPs: 235.2577. Time: 547.7057 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #319: GFLOPs: 1307.0975. Time: 98.5787 us. Best GFLOPs: 6111.2078
2023-11-11 03:57:14 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #320: GFLOPs: 2582.4346. Time: 49.8955 us. Best GFLOPs: 6111.2078
2023-11-11 04:42:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 04:42:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 04:42:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:43:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:43:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:43:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:43:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 2000 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:43:24 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2023-11-11 04:43:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 160 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:44:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:44:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:45:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 04:45:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1449  1.1369  1.1327  1.1246  1.0788  1.0729  1.0716  1.0713  1.0701  1.0625  1.0624  1.0601  1.0508  1.0255  1.0225  1.0132
[17 : 32]:	1.0072  0.9852  0.9716  0.9704  0.9695  0.9674  0.9664  0.9635  0.9624  0.9609  0.9587  0.9578  0.9573  0.9559  0.9544  0.9531
[33 : 48]:	0.9526  0.9520  0.9508  0.9501  0.9496  0.9476  0.9471  0.9467  0.9460  0.9456  0.9455  0.9454  0.9450  0.9441  0.9439  0.9437
[49 : 64]:	0.9430  0.9424  0.9421  0.9421  0.9421  0.9409  0.9403  0.9402  0.9402  0.9394  0.9392  0.9387  0.9385  0.9385  0.9382  0.9363
2023-11-11 04:45:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 04:45:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #321: GFLOPs: 5747.2958. Time: 22.4196 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #322: GFLOPs: 2810.7187. Time: 45.8431 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #323: GFLOPs: 1687.2016. Time: 76.3702 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #324: GFLOPs: 4828.2142. Time: 26.6873 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #325: GFLOPs: 4526.5462. Time: 28.4658 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #326: GFLOPs: 5665.0657. Time: 22.7450 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #327: GFLOPs: 5655.1081. Time: 22.7851 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #328: GFLOPs: 5645.2548. Time: 22.8248 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #329: GFLOPs: 1791.5443. Time: 71.9223 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #330: GFLOPs: 5572.2833. Time: 23.1237 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #331: GFLOPs: 4551.8481. Time: 28.3076 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #332: GFLOPs: 4331.4074. Time: 29.7483 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #333: GFLOPs: 569.1184. Time: 226.4063 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #334: GFLOPs: 1697.7659. Time: 75.8950 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #335: GFLOPs: 1655.1277. Time: 77.8502 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #336: GFLOPs: 1262.9863. Time: 102.0217 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #337: GFLOPs: 1235.6794. Time: 104.2762 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #338: GFLOPs: 5408.9610. Time: 23.8219 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #339: GFLOPs: 4899.1315. Time: 26.3010 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #340: GFLOPs: 5272.5881. Time: 24.4381 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #341: GFLOPs: 4971.7365. Time: 25.9169 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #342: GFLOPs: 5705.8084. Time: 22.5826 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #343: GFLOPs: 5738.3555. Time: 22.4545 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #344: GFLOPs: 1422.4296. Time: 90.5858 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #345: GFLOPs: 5836.1353. Time: 22.0783 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #346: GFLOPs: 5752.2915. Time: 22.4001 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #347: GFLOPs: 6057.9214. Time: 21.2700 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #348: GFLOPs: 3564.1746. Time: 36.1520 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #349: GFLOPs: 2156.0956. Time: 59.7617 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #350: GFLOPs: 6033.0116. Time: 21.3578 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #351: GFLOPs: 5672.4474. Time: 22.7154 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #352: GFLOPs: 2333.4033. Time: 55.2206 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #353: GFLOPs: 5858.9182. Time: 21.9925 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #354: GFLOPs: 6036.3049. Time: 21.3462 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #355: GFLOPs: 5470.0409. Time: 23.5559 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #356: GFLOPs: 4887.8861. Time: 26.3615 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #357: GFLOPs: 5797.8928. Time: 22.2239 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #358: GFLOPs: 6005.7843. Time: 21.4546 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #359: GFLOPs: 5633.5361. Time: 22.8723 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #360: GFLOPs: 5709.2587. Time: 22.5689 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #361: GFLOPs: 5368.5579. Time: 24.0012 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #362: GFLOPs: 5703.7108. Time: 22.5909 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #363: GFLOPs: 1804.8487. Time: 71.3921 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #364: GFLOPs: 5594.7117. Time: 23.0310 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #365: GFLOPs: 5526.0834. Time: 23.3171 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #366: GFLOPs: 5814.4279. Time: 22.1607 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #367: GFLOPs: 5761.2455. Time: 22.3653 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #368: GFLOPs: 5244.1212. Time: 24.5707 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #369: GFLOPs: 5884.4696. Time: 21.8970 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #370: GFLOPs: 5791.9859. Time: 22.2466 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #371: GFLOPs: 5800.2660. Time: 22.2148 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #372: GFLOPs: 5250.6468. Time: 24.5402 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #373: GFLOPs: 5660.6005. Time: 22.7630 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #374: GFLOPs: 5027.0812. Time: 25.6316 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #375: GFLOPs: 5247.2769. Time: 24.5560 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #376: GFLOPs: 5754.7480. Time: 22.3905 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #377: GFLOPs: 5173.6269. Time: 24.9055 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #378: GFLOPs: 4127.6874. Time: 31.2165 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #379: GFLOPs: 3215.1245. Time: 40.0768 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #380: GFLOPs: 4708.7899. Time: 27.3641 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #381: GFLOPs: 5843.1174. Time: 22.0519 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #382: GFLOPs: 1777.6427. Time: 72.4847 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #383: GFLOPs: 782.3435. Time: 164.7000 us. Best GFLOPs: 6111.2078
2023-11-11 04:46:08 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #384: GFLOPs: 56.4298. Time: 2283.4036 us. Best GFLOPs: 6111.2078
2023-11-11 05:48:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 05:48:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 05:48:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:49:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:49:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:49:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:49:18 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2023-11-11 05:49:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:50:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:50:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:51:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 05:51:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3617  1.3077  1.2973  1.2962  1.0577  1.0487  1.0482  1.0468  1.0451  1.0447  1.0443  1.0343  1.0342  1.0301  1.0263  1.0161
[17 : 32]:	1.0140  1.0098  1.0036  1.0016  0.9998  0.9953  0.9914  0.9901  0.9856  0.9840  0.9826  0.9817  0.9806  0.9785  0.9776  0.9742
[33 : 48]:	0.9741  0.9737  0.9734  0.9731  0.9719  0.9709  0.9707  0.9704  0.9695  0.9692  0.9685  0.9674  0.9660  0.9658  0.9647  0.9621
[49 : 64]:	0.9612  0.9612  0.9611  0.9602  0.9600  0.9576  0.9574  0.9572  0.9570  0.9569  0.9564  0.9556  0.9555  0.9554  0.9552  0.9552
2023-11-11 05:51:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 05:51:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #385: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(144)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1176))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1176) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(384) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2304))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 64, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 1, 49, 2, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144 = sch.split(loop=l142, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #386: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(144)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1176))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1176) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 64, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 1, 49, 2, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #387: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(144)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1176))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1176) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 64, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 1, 49, 2, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 49, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #388: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(144)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1176))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1176) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 64, 1, 1, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 1, 49, 2, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #389: GFLOPs: 5094.7122. Time: 25.2913 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #390: GFLOPs: 5195.9654. Time: 24.7985 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #391: GFLOPs: 5510.0294. Time: 23.3850 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #392: GFLOPs: 5087.0928. Time: 25.3292 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #393: GFLOPs: 5108.7751. Time: 25.2217 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #394: GFLOPs: 5321.5308. Time: 24.2133 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #395: GFLOPs: 5448.1348. Time: 23.6507 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #396: GFLOPs: 5566.7788. Time: 23.1466 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #397: GFLOPs: 5276.0684. Time: 24.4220 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #398: GFLOPs: 5250.2605. Time: 24.5420 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #399: GFLOPs: 5285.8337. Time: 24.3768 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #400: GFLOPs: 5109.0357. Time: 25.2204 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #401: GFLOPs: 4799.3589. Time: 26.8477 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #402: GFLOPs: 5209.5527. Time: 24.7338 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #403: GFLOPs: 5037.4435. Time: 25.5788 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #404: GFLOPs: 4696.1953. Time: 27.4375 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #405: GFLOPs: 5717.1846. Time: 22.5377 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #406: GFLOPs: 5640.8679. Time: 22.8426 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #407: GFLOPs: 5750.8777. Time: 22.4056 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #408: GFLOPs: 5737.0552. Time: 22.4596 us. Best GFLOPs: 6111.2078
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #409: GFLOPs: 6207.8009. Time: 20.7565 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #410: GFLOPs: 5033.4092. Time: 25.5993 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #411: GFLOPs: 5592.1797. Time: 23.0415 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #412: GFLOPs: 5973.0245. Time: 21.5723 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #413: GFLOPs: 4917.6757. Time: 26.2018 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #414: GFLOPs: 5703.2138. Time: 22.5929 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #415: GFLOPs: 5536.2297. Time: 23.2743 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #416: GFLOPs: 5969.8735. Time: 21.5837 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #417: GFLOPs: 5726.7515. Time: 22.5000 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #418: GFLOPs: 5188.1492. Time: 24.8358 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #419: GFLOPs: 5896.3606. Time: 21.8528 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #420: GFLOPs: 5975.1093. Time: 21.5648 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #421: GFLOPs: 5267.5033. Time: 24.4617 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #422: GFLOPs: 5544.3540. Time: 23.2402 us. Best GFLOPs: 6207.8009
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #423: GFLOPs: 6451.6258. Time: 19.9720 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #424: GFLOPs: 5873.4440. Time: 21.9381 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #425: GFLOPs: 5309.0841. Time: 24.2701 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #426: GFLOPs: 1937.1655. Time: 66.5157 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #427: GFLOPs: 5908.6960. Time: 21.8072 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #428: GFLOPs: 5911.3998. Time: 21.7972 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #429: GFLOPs: 6225.4735. Time: 20.6975 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #430: GFLOPs: 5750.4056. Time: 22.4075 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #431: GFLOPs: 5678.0952. Time: 22.6928 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #432: GFLOPs: 5312.3965. Time: 24.2550 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #433: GFLOPs: 6079.1022. Time: 21.1959 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #434: GFLOPs: 5004.8834. Time: 25.7452 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #435: GFLOPs: 6173.9579. Time: 20.8702 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #436: GFLOPs: 5888.6608. Time: 21.8814 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #437: GFLOPs: 5902.7604. Time: 21.8291 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #438: GFLOPs: 6275.0434. Time: 20.5340 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #439: GFLOPs: 5681.8925. Time: 22.6776 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #440: GFLOPs: 5655.7838. Time: 22.7823 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #441: GFLOPs: 6104.5620. Time: 21.1075 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #442: GFLOPs: 5812.4338. Time: 22.1683 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #443: GFLOPs: 5841.7180. Time: 22.0572 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #444: GFLOPs: 5905.6687. Time: 21.8184 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #445: GFLOPs: 5904.0787. Time: 21.8242 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #446: GFLOPs: 63.3985. Time: 2032.4147 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #447: GFLOPs: 223.9393. Time: 575.3879 us. Best GFLOPs: 6451.6258
2023-11-11 05:52:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #448: GFLOPs: 628.1212. Time: 205.1387 us. Best GFLOPs: 6451.6258
2023-11-11 06:54:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 06:54:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 06:54:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:54:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:54:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:54:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1596 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:55:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:55:07 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2023-11-11 06:55:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:56:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:56:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:56:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 06:57:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2761  1.2598  1.2326  1.2299  1.2288  1.2249  1.2106  1.2080  1.1996  1.1884  1.1729  1.1612  1.1469  1.1353  1.0878  1.0439
[17 : 32]:	1.0421  1.0369  1.0355  1.0105  0.9885  0.9615  0.9591  0.9569  0.9531  0.9507  0.9503  0.9492  0.9487  0.9477  0.9449  0.9446
[33 : 48]:	0.9432  0.9423  0.9421  0.9412  0.9315  0.9311  0.9293  0.9290  0.9283  0.9281  0.9280  0.9263  0.9260  0.9253  0.9247  0.9245
[49 : 64]:	0.9225  0.9220  0.9220  0.9217  0.9190  0.9187  0.9185  0.9178  0.9177  0.9175  0.9174  0.9166  0.9161  0.9147  0.9147  0.9144
2023-11-11 06:57:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 06:57:06 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #449: GFLOPs: 429.9626. Time: 299.6818 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #450: GFLOPs: 445.4202. Time: 289.2818 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #451: GFLOPs: 402.0192. Time: 320.5120 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #452: GFLOPs: 419.4053. Time: 307.2254 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #453: GFLOPs: 615.3781. Time: 209.3867 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #454: GFLOPs: 614.7973. Time: 209.5845 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #455: GFLOPs: 439.1735. Time: 293.3965 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #456: GFLOPs: 388.7251. Time: 331.4732 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #457: GFLOPs: 448.1908. Time: 287.4935 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #458: GFLOPs: 386.7861. Time: 333.1350 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #459: GFLOPs: 389.3652. Time: 330.9283 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #460: GFLOPs: 471.5653. Time: 273.2431 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #461: GFLOPs: 447.8577. Time: 287.7074 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #462: GFLOPs: 448.9313. Time: 287.0193 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #463: GFLOPs: 5048.4229. Time: 25.5232 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #464: GFLOPs: 4614.3704. Time: 27.9241 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #465: GFLOPs: 5929.8221. Time: 21.7295 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #466: GFLOPs: 592.2115. Time: 217.5776 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #467: GFLOPs: 4707.3759. Time: 27.3724 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #468: GFLOPs: 5974.2269. Time: 21.5680 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #469: GFLOPs: 6376.4381. Time: 20.2075 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #470: GFLOPs: 6059.5777. Time: 21.2642 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #471: GFLOPs: 6153.8665. Time: 20.9384 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #472: GFLOPs: 6174.7173. Time: 20.8677 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #473: GFLOPs: 6060.2816. Time: 21.2617 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #474: GFLOPs: 6378.4829. Time: 20.2010 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #475: GFLOPs: 6389.0275. Time: 20.1677 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #476: GFLOPs: 6388.5534. Time: 20.1692 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #477: GFLOPs: 6389.1997. Time: 20.1672 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #478: GFLOPs: 6072.9340. Time: 21.2174 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #479: GFLOPs: 6373.1246. Time: 20.2180 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #480: GFLOPs: 3522.9662. Time: 36.5749 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #481: GFLOPs: 6218.2313. Time: 20.7216 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #482: GFLOPs: 2713.1896. Time: 47.4910 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #483: GFLOPs: 6345.9609. Time: 20.3046 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #484: GFLOPs: 6191.0474. Time: 20.8126 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #485: GFLOPs: 6039.5323. Time: 21.3348 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #486: GFLOPs: 6054.1822. Time: 21.2831 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #487: GFLOPs: 6295.4415. Time: 20.4675 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #488: GFLOPs: 5963.2004. Time: 21.6079 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #489: GFLOPs: 6047.4785. Time: 21.3067 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #490: GFLOPs: 6221.8989. Time: 20.7094 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #491: GFLOPs: 6036.7753. Time: 21.3445 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #492: GFLOPs: 6054.0975. Time: 21.2834 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #493: GFLOPs: 6057.5472. Time: 21.2713 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #494: GFLOPs: 6129.7365. Time: 21.0208 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #495: GFLOPs: 6049.8209. Time: 21.2985 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #496: GFLOPs: 5784.4311. Time: 22.2757 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #497: GFLOPs: 5961.9046. Time: 21.6126 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #498: GFLOPs: 6179.2344. Time: 20.8524 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #499: GFLOPs: 6071.1092. Time: 21.2238 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #500: GFLOPs: 6069.0999. Time: 21.2308 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #501: GFLOPs: 6052.0007. Time: 21.2908 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #502: GFLOPs: 6036.6678. Time: 21.3449 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #503: GFLOPs: 5967.4198. Time: 21.5926 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #504: GFLOPs: 5778.4745. Time: 22.2986 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #505: GFLOPs: 6041.4458. Time: 21.3280 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #506: GFLOPs: 5780.1766. Time: 22.2920 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #507: GFLOPs: 5754.1649. Time: 22.3928 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #508: GFLOPs: 64.3010. Time: 2003.8861 us. Best GFLOPs: 6451.6258
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #509: GFLOPs: 6615.6782. Time: 19.4768 us. Best GFLOPs: 6615.6782
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #510: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(84), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(221)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2352))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2352) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7056))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 4, 8, 1, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 7, 2, 7, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 06:58:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #511: GFLOPs: 3637.5127. Time: 35.4231 us. Best GFLOPs: 6615.6782
2023-11-11 08:06:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 08:07:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 08:07:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:07:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:07:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:07:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:07:32 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2023-11-11 08:07:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:08:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:08:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:09:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:09:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0020  0.9873  0.9867  0.9835  0.9812  0.9809  0.9799  0.9796  0.9783  0.9769  0.9764  0.9746  0.9745  0.9737  0.9733  0.9733
[17 : 32]:	0.9721  0.9717  0.9709  0.9679  0.9629  0.9619  0.9589  0.9586  0.9580  0.9580  0.9577  0.9567  0.9567  0.9561  0.9561  0.9559
[33 : 48]:	0.9559  0.9556  0.9555  0.9553  0.9550  0.9549  0.9539  0.9534  0.9531  0.9531  0.9531  0.9529  0.9529  0.9527  0.9526  0.9520
[49 : 64]:	0.9514  0.9512  0.9512  0.9508  0.9507  0.9507  0.9507  0.9506  0.9501  0.9498  0.9495  0.9494  0.9487  0.9486  0.9484  0.9482
2023-11-11 08:09:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 08:09:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #512: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 2, 32])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #513: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(252), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #514: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144 = sch.split(loop=l142, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #515: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(252), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #516: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(252), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #517: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 2, 32])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #518: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 2, 32])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #519: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(252), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 224, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #520: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 2, 32])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144 = sch.split(loop=l142, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #521: GFLOPs: 6563.0579. Time: 19.6329 us. Best GFLOPs: 6615.6782
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #522: GFLOPs: 6575.2203. Time: 19.5966 us. Best GFLOPs: 6615.6782
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #523: GFLOPs: 6647.5381. Time: 19.3834 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #524: GFLOPs: 6636.8075. Time: 19.4148 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #525: GFLOPs: 6549.1638. Time: 19.6746 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #526: GFLOPs: 6556.9268. Time: 19.6513 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #527: GFLOPs: 6543.2402. Time: 19.6924 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #528: GFLOPs: 6576.0672. Time: 19.5941 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #529: GFLOPs: 6589.1768. Time: 19.5551 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #530: GFLOPs: 6568.1540. Time: 19.6177 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #531: GFLOPs: 6500.1824. Time: 19.8228 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #532: GFLOPs: 4670.6182. Time: 27.5878 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #533: GFLOPs: 6158.8111. Time: 20.9216 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #534: GFLOPs: 6249.7495. Time: 20.6171 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #535: GFLOPs: 4634.6279. Time: 27.8020 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #536: GFLOPs: 6195.8231. Time: 20.7966 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #537: GFLOPs: 6388.5104. Time: 20.1693 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #538: GFLOPs: 6322.7569. Time: 20.3791 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #539: GFLOPs: 6106.7570. Time: 21.0999 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #540: GFLOPs: 6136.1045. Time: 20.9990 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #541: GFLOPs: 6385.0639. Time: 20.1802 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #542: GFLOPs: 6359.5581. Time: 20.2612 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #543: GFLOPs: 6339.3137. Time: 20.3259 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #544: GFLOPs: 6327.5215. Time: 20.3637 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #545: GFLOPs: 6319.9029. Time: 20.3883 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #546: GFLOPs: 6186.6236. Time: 20.8275 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #547: GFLOPs: 6404.2160. Time: 20.1199 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #548: GFLOPs: 6343.0187. Time: 20.3140 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #549: GFLOPs: 6185.7474. Time: 20.8305 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #550: GFLOPs: 6335.1677. Time: 20.3392 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #551: GFLOPs: 6407.4015. Time: 20.1099 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #552: GFLOPs: 6359.3340. Time: 20.2619 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #553: GFLOPs: 6358.1258. Time: 20.2657 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #554: GFLOPs: 6361.1630. Time: 20.2560 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #555: GFLOPs: 6404.9745. Time: 20.1175 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #556: GFLOPs: 6383.4713. Time: 20.1853 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #557: GFLOPs: 6406.4048. Time: 20.1130 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #558: GFLOPs: 6371.9917. Time: 20.2216 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #559: GFLOPs: 6396.8474. Time: 20.1430 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #560: GFLOPs: 6288.8423. Time: 20.4890 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #561: GFLOPs: 6182.0808. Time: 20.8428 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #562: GFLOPs: 6457.6744. Time: 19.9533 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #563: GFLOPs: 6403.1989. Time: 20.1231 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #564: GFLOPs: 6391.3563. Time: 20.1603 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #565: GFLOPs: 6509.1536. Time: 19.7955 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #566: GFLOPs: 6319.1561. Time: 20.3907 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #567: GFLOPs: 6363.0565. Time: 20.2500 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #568: GFLOPs: 6233.2670. Time: 20.6717 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #569: GFLOPs: 6403.8728. Time: 20.1209 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #570: GFLOPs: 6299.5532. Time: 20.4541 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #571: GFLOPs: 6327.4628. Time: 20.3639 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #572: GFLOPs: 6373.3739. Time: 20.2172 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #573: GFLOPs: 1945.0893. Time: 66.2448 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #574: GFLOPs: 216.4903. Time: 595.1858 us. Best GFLOPs: 6647.5381
2023-11-11 08:10:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #575: GFLOPs: 1185.1611. Time: 108.7211 us. Best GFLOPs: 6647.5381
2023-11-11 08:45:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 08:45:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 08:45:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:45:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:45:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1193 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:46:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:46:06 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2023-11-11 08:46:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:47:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:47:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:47:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 08:48:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0226  1.0217  1.0154  1.0128  1.0115  0.9923  0.9893  0.9893  0.9893  0.9865  0.9863  0.9863  0.9863  0.9855  0.9855  0.9840
[17 : 32]:	0.9817  0.9812  0.9808  0.9807  0.9795  0.9783  0.9781  0.9779  0.9778  0.9778  0.9773  0.9768  0.9763  0.9761  0.9754  0.9754
[33 : 48]:	0.9753  0.9751  0.9744  0.9744  0.9738  0.9735  0.9730  0.9728  0.9725  0.9719  0.9717  0.9708  0.9707  0.9706  0.9689  0.9684
[49 : 64]:	0.9672  0.9665  0.9661  0.9659  0.9643  0.9635  0.9630  0.9628  0.9624  0.9623  0.9619  0.9613  0.9606  0.9587  0.9578  0.9577
2023-11-11 08:48:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 08:48:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #576: GFLOPs: 6362.5529. Time: 20.2516 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #577: GFLOPs: 6438.0717. Time: 20.0141 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #578: GFLOPs: 6363.0740. Time: 20.2500 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #579: GFLOPs: 6470.1415. Time: 19.9149 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #580: GFLOPs: 6327.3070. Time: 20.3644 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #581: GFLOPs: 6239.3320. Time: 20.6516 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #582: GFLOPs: 6390.1732. Time: 20.1641 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #583: GFLOPs: 6584.9335. Time: 19.5677 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #584: GFLOPs: 6593.4868. Time: 19.5423 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #585: GFLOPs: 6603.9172. Time: 19.5114 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #586: GFLOPs: 6340.0038. Time: 20.3236 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #587: GFLOPs: 6269.3819. Time: 20.5526 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #588: GFLOPs: 6241.8387. Time: 20.6433 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #589: GFLOPs: 6384.1694. Time: 20.1830 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #590: GFLOPs: 6385.5687. Time: 20.1786 us. Best GFLOPs: 6647.5381
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #591: GFLOPs: 6729.2117. Time: 19.1482 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #592: GFLOPs: 6180.0404. Time: 20.8497 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #593: GFLOPs: 6265.1836. Time: 20.5664 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #594: GFLOPs: 6554.3840. Time: 19.6589 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #595: GFLOPs: 4960.0265. Time: 25.9781 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #596: GFLOPs: 6467.8891. Time: 19.9218 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #597: GFLOPs: 6203.3277. Time: 20.7714 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #598: GFLOPs: 6618.0752. Time: 19.4697 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #599: GFLOPs: 6583.2771. Time: 19.5726 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #600: GFLOPs: 6614.6284. Time: 19.4798 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #601: GFLOPs: 6293.4271. Time: 20.4741 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #602: GFLOPs: 6553.4367. Time: 19.6617 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #603: GFLOPs: 6603.5545. Time: 19.5125 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #604: GFLOPs: 6592.0169. Time: 19.5467 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #605: GFLOPs: 6586.8939. Time: 19.5619 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #606: GFLOPs: 6614.3594. Time: 19.4806 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #607: GFLOPs: 6606.1841. Time: 19.5047 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #608: GFLOPs: 6612.8135. Time: 19.4852 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #609: GFLOPs: 6609.3526. Time: 19.4954 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #610: GFLOPs: 6309.8556. Time: 20.4207 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #611: GFLOPs: 6193.8468. Time: 20.8032 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #612: GFLOPs: 6628.3485. Time: 19.4395 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #613: GFLOPs: 6604.6880. Time: 19.5092 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #614: GFLOPs: 6392.6938. Time: 20.1561 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #615: GFLOPs: 6337.4997. Time: 20.3317 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #616: GFLOPs: 6614.3150. Time: 19.4808 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #617: GFLOPs: 6610.8594. Time: 19.4910 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #618: GFLOPs: 6341.8644. Time: 20.3177 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #619: GFLOPs: 5592.5143. Time: 23.0401 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #620: GFLOPs: 6357.3700. Time: 20.2681 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #621: GFLOPs: 6166.5856. Time: 20.8952 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #622: GFLOPs: 6103.8609. Time: 21.1099 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #623: GFLOPs: 6445.3025. Time: 19.9916 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #624: GFLOPs: 6526.0198. Time: 19.7443 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #625: GFLOPs: 6306.3722. Time: 20.4320 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #626: GFLOPs: 6528.4244. Time: 19.7371 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #627: GFLOPs: 5614.2648. Time: 22.9508 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #628: GFLOPs: 6341.5569. Time: 20.3187 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #629: GFLOPs: 6338.0206. Time: 20.3300 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #630: GFLOPs: 6267.9650. Time: 20.5572 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #631: GFLOPs: 6214.3297. Time: 20.7347 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #632: GFLOPs: 6448.1116. Time: 19.9829 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #633: GFLOPs: 5630.5580. Time: 22.8844 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #634: GFLOPs: 6282.9847. Time: 20.5081 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #635: GFLOPs: 6107.9034. Time: 21.0959 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #636: GFLOPs: 6252.1808. Time: 20.6091 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #637: GFLOPs: 3257.3890. Time: 39.5568 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #638: GFLOPs: 2633.5486. Time: 48.9271 us. Best GFLOPs: 6729.2117
2023-11-11 08:48:42 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #639: GFLOPs: 2506.4659. Time: 51.4078 us. Best GFLOPs: 6729.2117
2023-11-11 09:38:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 09:38:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 09:38:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:39:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:39:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:39:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1601 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:39:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:39:25 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2023-11-11 09:39:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:40:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:40:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:41:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 09:41:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0252  1.0192  1.0187  1.0187  1.0153  1.0143  1.0136  1.0104  1.0088  1.0063  1.0061  1.0022  0.9995  0.9957  0.9939  0.9919
[17 : 32]:	0.9919  0.9919  0.9911  0.9905  0.9901  0.9895  0.9893  0.9893  0.9885  0.9884  0.9883  0.9883  0.9883  0.9882  0.9879  0.9872
[33 : 48]:	0.9867  0.9867  0.9865  0.9859  0.9844  0.9827  0.9825  0.9825  0.9823  0.9823  0.9821  0.9820  0.9820  0.9819  0.9808  0.9796
[49 : 64]:	0.9795  0.9790  0.9787  0.9785  0.9784  0.9784  0.9783  0.9781  0.9778  0.9778  0.9775  0.9774  0.9772  0.9769  0.9767  0.9765
2023-11-11 09:41:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 09:41:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #640: GFLOPs: 6363.6506. Time: 20.2481 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #641: GFLOPs: 6482.1827. Time: 19.8779 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #642: GFLOPs: 6359.7185. Time: 20.2606 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #643: GFLOPs: 6358.8217. Time: 20.2635 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #644: GFLOPs: 6448.2091. Time: 19.9826 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #645: GFLOPs: 6238.9458. Time: 20.6528 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #646: GFLOPs: 6559.4299. Time: 19.6438 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #647: GFLOPs: 6174.1927. Time: 20.8694 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #648: GFLOPs: 6364.9771. Time: 20.2439 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #649: GFLOPs: 6369.4725. Time: 20.2296 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #650: GFLOPs: 6368.5730. Time: 20.2325 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #651: GFLOPs: 6357.4132. Time: 20.2680 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #652: GFLOPs: 5024.1793. Time: 25.6464 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #653: GFLOPs: 5065.3825. Time: 25.4378 us. Best GFLOPs: 6729.2117
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #654: GFLOPs: 6941.5063. Time: 18.5625 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #655: GFLOPs: 6447.7770. Time: 19.9839 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #656: GFLOPs: 6363.0523. Time: 20.2500 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #657: GFLOPs: 6362.6674. Time: 20.2512 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #658: GFLOPs: 6481.8344. Time: 19.8789 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #659: GFLOPs: 6674.2232. Time: 19.3059 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #660: GFLOPs: 6688.1477. Time: 19.2657 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #661: GFLOPs: 6699.3270. Time: 19.2336 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #662: GFLOPs: 6398.7206. Time: 20.1371 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #663: GFLOPs: 6718.3423. Time: 19.1791 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #664: GFLOPs: 6373.5604. Time: 20.2166 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #665: GFLOPs: 6419.4688. Time: 20.0721 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #666: GFLOPs: 6719.7959. Time: 19.1750 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #667: GFLOPs: 6717.2605. Time: 19.1822 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #668: GFLOPs: 6721.1077. Time: 19.1712 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #669: GFLOPs: 6497.4460. Time: 19.8312 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #670: GFLOPs: 6709.9921. Time: 19.2030 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #671: GFLOPs: 6459.9450. Time: 19.9463 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #672: GFLOPs: 6685.2691. Time: 19.2740 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #673: GFLOPs: 6707.9153. Time: 19.2089 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #674: GFLOPs: 6722.6583. Time: 19.1668 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #675: GFLOPs: 6352.4230. Time: 20.2839 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #676: GFLOPs: 6214.4130. Time: 20.7344 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #677: GFLOPs: 6913.6479. Time: 18.6373 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #678: GFLOPs: 6371.4692. Time: 20.2233 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #679: GFLOPs: 6506.0722. Time: 19.8049 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #680: GFLOPs: 6763.5505. Time: 19.0509 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #681: GFLOPs: 6467.7990. Time: 19.9221 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #682: GFLOPs: 6709.9981. Time: 19.2030 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #683: GFLOPs: 6372.9022. Time: 20.2187 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #684: GFLOPs: 6459.2045. Time: 19.9486 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #685: GFLOPs: 6381.6211. Time: 20.1911 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #686: GFLOPs: 6399.1025. Time: 20.1359 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #687: GFLOPs: 6265.5886. Time: 20.5650 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #688: GFLOPs: 6425.4455. Time: 20.0534 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #689: GFLOPs: 6418.8252. Time: 20.0741 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #690: GFLOPs: 6320.3987. Time: 20.3867 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #691: GFLOPs: 6717.7370. Time: 19.1809 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #692: GFLOPs: 6372.6018. Time: 20.2197 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #693: GFLOPs: 6670.8539. Time: 19.3157 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #694: GFLOPs: 6382.8685. Time: 20.1872 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #695: GFLOPs: 6706.4488. Time: 19.2131 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #696: GFLOPs: 6269.1212. Time: 20.5534 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #697: GFLOPs: 6368.2911. Time: 20.2334 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #698: GFLOPs: 6667.3064. Time: 19.3259 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #699: GFLOPs: 6215.7040. Time: 20.7301 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #700: GFLOPs: 6704.4772. Time: 19.2188 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #701: GFLOPs: 2282.7646. Time: 56.4456 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #702: GFLOPs: 2120.9013. Time: 60.7534 us. Best GFLOPs: 6941.5063
2023-11-11 09:42:05 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #703: GFLOPs: 1752.9087. Time: 73.5075 us. Best GFLOPs: 6941.5063
2023-11-11 10:24:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 10:24:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 10:24:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:24:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:25:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1193 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:25:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:25:08 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2023-11-11 10:25:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:26:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:26:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:27:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:27:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9815  0.9814  0.9810  0.9806  0.9702  0.9692  0.9687  0.9682  0.9669  0.9666  0.9662  0.9660  0.9657  0.9653  0.9648  0.9644
[17 : 32]:	0.9644  0.9644  0.9644  0.9637  0.9636  0.9631  0.9631  0.9631  0.9631  0.9626  0.9626  0.9623  0.9619  0.9617  0.9615  0.9615
[33 : 48]:	0.9614  0.9612  0.9610  0.9610  0.9609  0.9607  0.9606  0.9606  0.9604  0.9603  0.9602  0.9602  0.9601  0.9600  0.9599  0.9599
[49 : 64]:	0.9598  0.9595  0.9595  0.9594  0.9594  0.9594  0.9587  0.9587  0.9587  0.9586  0.9585  0.9585  0.9585  0.9582  0.9580  0.9578
2023-11-11 10:27:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 10:27:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #704: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #705: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #706: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145 = sch.split(loop=l143, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #707: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #708: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #709: GFLOPs: 6842.3673. Time: 18.8315 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #710: GFLOPs: 6849.5875. Time: 18.8116 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #711: GFLOPs: 6862.0264. Time: 18.7775 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #712: GFLOPs: 6775.4902. Time: 19.0174 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #713: GFLOPs: 6779.6953. Time: 19.0056 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #714: GFLOPs: 6720.6458. Time: 19.1726 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #715: GFLOPs: 6623.3650. Time: 19.4542 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #716: GFLOPs: 6847.0332. Time: 18.8187 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #717: GFLOPs: 6767.0815. Time: 19.0410 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #718: GFLOPs: 6584.0774. Time: 19.5702 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #719: GFLOPs: 6616.9068. Time: 19.4731 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #720: GFLOPs: 6653.4109. Time: 19.3663 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #721: GFLOPs: 6650.0306. Time: 19.3761 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #722: GFLOPs: 6654.2391. Time: 19.3639 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #723: GFLOPs: 6642.3065. Time: 19.3987 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #724: GFLOPs: 6623.8770. Time: 19.4527 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #725: GFLOPs: 6648.9161. Time: 19.3794 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #726: GFLOPs: 6653.6332. Time: 19.3657 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #727: GFLOPs: 6648.9909. Time: 19.3792 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #728: GFLOPs: 6660.9005. Time: 19.3445 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #729: GFLOPs: 6851.3277. Time: 18.8069 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #730: GFLOPs: 6850.6798. Time: 18.8086 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #731: GFLOPs: 6618.2094. Time: 19.4693 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #732: GFLOPs: 6564.1086. Time: 19.6298 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #733: GFLOPs: 6854.9671. Time: 18.7969 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #734: GFLOPs: 6556.3048. Time: 19.6531 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #735: GFLOPs: 6640.5924. Time: 19.4037 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #736: GFLOPs: 6569.0269. Time: 19.6151 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #737: GFLOPs: 6617.9533. Time: 19.4701 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #738: GFLOPs: 6623.6032. Time: 19.4535 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #739: GFLOPs: 6631.9129. Time: 19.4291 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #740: GFLOPs: 6812.9848. Time: 18.9127 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #741: GFLOPs: 6647.5825. Time: 19.3833 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #742: GFLOPs: 6571.8898. Time: 19.6065 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #743: GFLOPs: 6615.5232. Time: 19.4772 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #744: GFLOPs: 6839.5561. Time: 18.8392 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #745: GFLOPs: 6641.9905. Time: 19.3996 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #746: GFLOPs: 6567.4485. Time: 19.6198 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #747: GFLOPs: 6639.9158. Time: 19.4057 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #748: GFLOPs: 6654.8282. Time: 19.3622 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #749: GFLOPs: 6750.1396. Time: 19.0888 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #750: GFLOPs: 6607.0008. Time: 19.5023 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #751: GFLOPs: 6632.4785. Time: 19.4274 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #752: GFLOPs: 6656.6910. Time: 19.3568 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #753: GFLOPs: 6651.9959. Time: 19.3704 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #754: GFLOPs: 6647.3185. Time: 19.3841 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #755: GFLOPs: 6567.7170. Time: 19.6190 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #756: GFLOPs: 6572.1270. Time: 19.6058 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #757: GFLOPs: 6568.7487. Time: 19.6159 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #758: GFLOPs: 6618.4546. Time: 19.4686 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #759: GFLOPs: 6645.7372. Time: 19.3887 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #760: GFLOPs: 6603.9625. Time: 19.5113 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #761: GFLOPs: 6769.0298. Time: 19.0355 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #762: GFLOPs: 6487.8651. Time: 19.8605 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #763: GFLOPs: 6631.4102. Time: 19.4306 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #764: GFLOPs: 6648.7194. Time: 19.3800 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #765: GFLOPs: 2664.7204. Time: 48.3548 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #766: GFLOPs: 600.1398. Time: 214.7032 us. Best GFLOPs: 6941.5063
2023-11-11 10:28:09 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #767: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(63), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(21) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(63), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(63), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(63) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(576))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(21) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(21) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 2, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 8, 1, 1, 2])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[1, 2, 7, 2, 7])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 63, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 63, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 10:51:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 10:51:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 10:51:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:51:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:51:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:51:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:51:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1990 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:51:50 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2023-11-11 10:52:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:52:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:53:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:53:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 10:53:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9822  0.9801  0.9716  0.9708  0.9707  0.9703  0.9699  0.9696  0.9693  0.9692  0.9691  0.9690  0.9687  0.9678  0.9671  0.9671
[17 : 32]:	0.9671  0.9669  0.9664  0.9663  0.9663  0.9661  0.9658  0.9658  0.9658  0.9657  0.9652  0.9652  0.9649  0.9644  0.9642  0.9641
[33 : 48]:	0.9639  0.9639  0.9636  0.9636  0.9635  0.9635  0.9635  0.9633  0.9631  0.9631  0.9631  0.9631  0.9630  0.9628  0.9628  0.9628
[49 : 64]:	0.9626  0.9625  0.9623  0.9623  0.9622  0.9619  0.9618  0.9618  0.9614  0.9613  0.9612  0.9612  0.9612  0.9611  0.9610  0.9610
2023-11-11 10:53:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 10:53:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #768: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #769: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 4, 1])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137 = sch.split(loop=l135, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b109)
l143, l144 = sch.split(loop=l142, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #770: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home2/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home2/xiachunwei/Software/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home2/xiachunwei/Software/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home2/xiachunwei/Software/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFun
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home2/xiachunwei/Software/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #771: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p3: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(504), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(64) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w], p3[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w] + p3[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="T_relu", func_name="main")
b7 = sch.get_block(name="root", func_name="main")
b8, b9 = sch.get_producers(block=b2)
sch.compute_inline(block=b9)
b10, = sch.get_consumers(block=b2)
l11, l12, l13, l14 = sch.get_loops(block=b10)
l15, l16 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
l17, l18 = sch.split(loop=l14, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l15, l17, l16, l18)
sch.compute_at(block=b2, loop=l17, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l19, l20, l21, l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b2)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l28)
b29, b30 = sch.get_producers(block=b0)
sch.compute_inline(block=b30)
b31, = sch.get_producers(block=b29)
l32, l33, l34, l35, l36, l37 = sch.get_loops(block=b0)
sch.reorder(l34, l35, l32, l33, l36, l37)
sch.unroll(loop=l32)
sch.unroll(loop=l33)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
l38 = sch.fuse(l34, l35, preserve_unit_iters=True)
v39 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l40, l41 = sch.split(loop=l38, factors=[None, v39], preserve_unit_iters=True)
sch.bind(loop=l40, thread_axis="blockIdx.x")
sch.bind(loop=l41, thread_axis="threadIdx.x")
b42 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b42, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b29, loop=l41, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b29, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b31)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l43, l44, l45, l46, l47 = sch.get_loops(block=b1)
v48, v49, v50, v51, v52 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l53, l54, l55, l56, l57 = sch.split(loop=l43, factors=[v48, v49, v50, v51, v52], preserve_unit_iters=True)
v58, v59, v60, v61, v62 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l63, l64, l65, l66, l67 = sch.split(loop=l44, factors=[v58, v59, v60, v61, v62], preserve_unit_iters=True)
v68, v69, v70, v71, v72 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l73, l74, l75, l76, l77 = sch.split(loop=l45, factors=[v68, v69, v70, v71, v72], preserve_unit_iters=True)
v78, v79, v80, v81, v82 = sch.sample_perfect_tile(loop=l46, n=5, max_innermost_factor=64, decision=[7, 1, 14, 1, 2])
l83, l84, l85, l86, l87 = sch.split(loop=l46, factors=[v78, v79, v80, v81, v82], preserve_unit_iters=True)
v88, v89, v90 = sch.sample_perfect_tile(loop=l47, n=3, max_innermost_factor=64, decision=[1, 64, 1])
l91, l92, l93 = sch.split(loop=l47, factors=[v88, v89, v90], preserve_unit_iters=True)
sch.reorder(l53, l63, l73, l83, l54, l64, l74, l84, l55, l65, l75, l85, l91, l92, l56, l66, l76, l86, l93, l57, l67, l77, l87)
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="blockIdx.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="vthread.x")
l96 = sch.fuse(l55, l65, l75, l85, preserve_unit_iters=True)
sch.bind(loop=l96, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b97 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b97, loop=l96, preserve_unit_loops=True, index=-1)
b98 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b98, loop=l91, preserve_unit_loops=True, index=-1)
l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b98)
l107 = sch.fuse(l103, l104, l105, l106, preserve_unit_iters=True)
v108 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch", ann_val=v108)
b109 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b109, loop=l91, preserve_unit_loops=True, index=-1)
l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b109)
l118 = sch.fuse(l114, l115, l116, l117, preserve_unit_iters=True)
v119 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch", ann_val=v119)
sch.reverse_compute_inline(block=b6)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b7, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b98, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b98)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b109)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #772: GFLOPs: 6818.8057. Time: 18.8966 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #773: GFLOPs: 6862.2529. Time: 18.7769 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #774: GFLOPs: 6846.1337. Time: 18.8211 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #775: GFLOPs: 6864.0765. Time: 18.7719 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #776: GFLOPs: 6725.8880. Time: 19.1576 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #777: GFLOPs: 6861.8542. Time: 18.7780 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #778: GFLOPs: 6894.2695. Time: 18.6897 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #779: GFLOPs: 6481.3878. Time: 19.8803 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #780: GFLOPs: 6898.4567. Time: 18.6784 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #781: GFLOPs: 6869.6272. Time: 18.7568 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #782: GFLOPs: 6829.8154. Time: 18.8661 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #783: GFLOPs: 6821.0988. Time: 18.8902 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #784: GFLOPs: 6831.0827. Time: 18.8626 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #785: GFLOPs: 6583.2771. Time: 19.5726 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #786: GFLOPs: 6656.0060. Time: 19.3588 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #787: GFLOPs: 6842.3803. Time: 18.8315 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #788: GFLOPs: 6876.8265. Time: 18.7371 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #789: GFLOPs: 6780.1523. Time: 19.0043 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #790: GFLOPs: 6829.5760. Time: 18.8668 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #791: GFLOPs: 6804.8298. Time: 18.9354 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #792: GFLOPs: 6876.8740. Time: 18.7370 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #793: GFLOPs: 6534.8378. Time: 19.7177 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #794: GFLOPs: 6648.5389. Time: 19.3805 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #795: GFLOPs: 6864.9156. Time: 18.7696 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #796: GFLOPs: 6653.1981. Time: 19.3669 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #797: GFLOPs: 6670.7788. Time: 19.3159 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #798: GFLOPs: 6604.3531. Time: 19.5102 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #799: GFLOPs: 6659.9045. Time: 19.3474 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #800: GFLOPs: 6667.3064. Time: 19.3259 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #801: GFLOPs: 6649.6724. Time: 19.3772 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #802: GFLOPs: 6664.7617. Time: 19.3333 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #803: GFLOPs: 6797.4768. Time: 18.9559 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #804: GFLOPs: 6782.3780. Time: 18.9981 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #805: GFLOPs: 6749.7271. Time: 19.0900 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #806: GFLOPs: 6734.8561. Time: 19.1321 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #807: GFLOPs: 6493.0318. Time: 19.8447 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #808: GFLOPs: 6886.8489. Time: 18.7099 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #809: GFLOPs: 6649.6235. Time: 19.3773 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #810: GFLOPs: 6885.8298. Time: 18.7126 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #811: GFLOPs: 6618.6126. Time: 19.4681 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #812: GFLOPs: 6852.7696. Time: 18.8029 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #813: GFLOPs: 6624.4414. Time: 19.4510 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #814: GFLOPs: 6833.6655. Time: 18.8555 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #815: GFLOPs: 6651.2519. Time: 19.3726 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #816: GFLOPs: 6659.8744. Time: 19.3475 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #817: GFLOPs: 6653.1981. Time: 19.3669 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #818: GFLOPs: 6629.2471. Time: 19.4369 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #819: GFLOPs: 6659.7402. Time: 19.3479 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #820: GFLOPs: 6886.8021. Time: 18.7100 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #821: GFLOPs: 6653.3337. Time: 19.3665 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #822: GFLOPs: 6667.6248. Time: 19.3250 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #823: GFLOPs: 6879.6621. Time: 18.7294 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #824: GFLOPs: 6656.1379. Time: 19.3584 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #825: GFLOPs: 6744.2855. Time: 19.1054 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #826: GFLOPs: 6627.2252. Time: 19.4428 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #827: GFLOPs: 6655.9608. Time: 19.3589 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #828: GFLOPs: 6637.2570. Time: 19.4134 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #829: GFLOPs: 29.9579. Time: 4301.0988 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #830: GFLOPs: 2463.0404. Time: 52.3142 us. Best GFLOPs: 6941.5063
2023-11-11 10:54:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #831: GFLOPs: 917.3044. Time: 140.4681 us. Best GFLOPs: 6941.5063
2023-11-11 11:12:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:12:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:12:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:12:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:12:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1193 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:12:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:12:59 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2023-11-11 11:13:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:13:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:14:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:14:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:14:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9736  0.9735  0.9728  0.9726  0.9718  0.9714  0.9708  0.9705  0.9701  0.9701  0.9700  0.9700  0.9697  0.9696  0.9696  0.9695
[17 : 32]:	0.9694  0.9692  0.9691  0.9687  0.9686  0.9677  0.9675  0.9671  0.9670  0.9667  0.9665  0.9662  0.9661  0.9660  0.9659  0.9657
[33 : 48]:	0.9655  0.9648  0.9647  0.9646  0.9645  0.9643  0.9641  0.9641  0.9641  0.9640  0.9640  0.9640  0.9639  0.9638  0.9638  0.9636
[49 : 64]:	0.9634  0.9634  0.9631  0.9631  0.9631  0.9631  0.9631  0.9630  0.9628  0.9626  0.9623  0.9623  0.9621  0.9621  0.9620  0.9618
2023-11-11 11:14:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 11:14:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #832: GFLOPs: 7066.3077. Time: 18.2347 us. Best GFLOPs: 7066.3077
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #833: GFLOPs: 6727.9365. Time: 19.1518 us. Best GFLOPs: 7066.3077
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #834: GFLOPs: 7045.6407. Time: 18.2882 us. Best GFLOPs: 7066.3077
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #835: GFLOPs: 6721.7947. Time: 19.1693 us. Best GFLOPs: 7066.3077
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #836: GFLOPs: 7084.8544. Time: 18.1870 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #837: GFLOPs: 6969.7292. Time: 18.4874 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #838: GFLOPs: 7005.6654. Time: 18.3925 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #839: GFLOPs: 6988.0547. Time: 18.4389 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #840: GFLOPs: 6992.8058. Time: 18.4264 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #841: GFLOPs: 6971.5251. Time: 18.4826 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #842: GFLOPs: 6991.5698. Time: 18.4296 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #843: GFLOPs: 6699.0055. Time: 19.2345 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #844: GFLOPs: 7066.4827. Time: 18.2342 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #845: GFLOPs: 6982.7407. Time: 18.4529 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #846: GFLOPs: 6992.0450. Time: 18.4284 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #847: GFLOPs: 6722.4476. Time: 19.1674 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #848: GFLOPs: 6985.0668. Time: 18.4468 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #849: GFLOPs: 6966.9434. Time: 18.4948 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #850: GFLOPs: 6740.2532. Time: 19.1168 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #851: GFLOPs: 6976.8678. Time: 18.4685 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #852: GFLOPs: 6991.0053. Time: 18.4311 us. Best GFLOPs: 7084.8544
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #853: GFLOPs: 7101.6357. Time: 18.1440 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #854: GFLOPs: 7062.3098. Time: 18.2450 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #855: GFLOPs: 6968.9263. Time: 18.4895 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #856: GFLOPs: 6993.1893. Time: 18.4254 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #857: GFLOPs: 7014.6474. Time: 18.3690 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #858: GFLOPs: 6997.8021. Time: 18.4132 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #859: GFLOPs: 6941.1803. Time: 18.5634 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #860: GFLOPs: 7060.7610. Time: 18.2490 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #861: GFLOPs: 6862.3526. Time: 18.7766 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #862: GFLOPs: 6751.4232. Time: 19.0852 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #863: GFLOPs: 6694.1447. Time: 19.2485 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #864: GFLOPs: 6618.0448. Time: 19.4698 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #865: GFLOPs: 6968.0682. Time: 18.4918 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #866: GFLOPs: 6999.4760. Time: 18.4088 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #867: GFLOPs: 6699.2812. Time: 19.2337 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #868: GFLOPs: 6988.5188. Time: 18.4377 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #869: GFLOPs: 6989.4791. Time: 18.4351 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #870: GFLOPs: 6960.1073. Time: 18.5129 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #871: GFLOPs: 6958.7889. Time: 18.5164 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #872: GFLOPs: 6683.1862. Time: 19.2800 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #873: GFLOPs: 6959.1465. Time: 18.5155 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #874: GFLOPs: 6960.8715. Time: 18.5109 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #875: GFLOPs: 7023.8447. Time: 18.3449 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #876: GFLOPs: 6991.3793. Time: 18.4301 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #877: GFLOPs: 6989.1465. Time: 18.4360 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #878: GFLOPs: 6967.0120. Time: 18.4946 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #879: GFLOPs: 6988.5769. Time: 18.4375 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #880: GFLOPs: 7050.7343. Time: 18.2750 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #881: GFLOPs: 6692.4496. Time: 19.2533 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #882: GFLOPs: 7009.4374. Time: 18.3826 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #883: GFLOPs: 6702.5875. Time: 19.2242 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #884: GFLOPs: 6998.6618. Time: 18.4109 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #885: GFLOPs: 6969.0678. Time: 18.4891 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #886: GFLOPs: 6993.8585. Time: 18.4236 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #887: GFLOPs: 6958.6479. Time: 18.5168 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #888: GFLOPs: 6701.8081. Time: 19.2264 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #889: GFLOPs: 7028.2284. Time: 18.3335 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #890: GFLOPs: 6703.2565. Time: 19.2223 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #891: GFLOPs: 6972.3271. Time: 18.4805 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #892: GFLOPs: 6708.6850. Time: 19.2067 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #893: GFLOPs: 685.0713. Time: 188.0855 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #894: GFLOPs: 2558.2745. Time: 50.3667 us. Best GFLOPs: 7101.6357
2023-11-11 11:15:30 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #895: GFLOPs: 2865.0482. Time: 44.9738 us. Best GFLOPs: 7101.6357
2023-11-11 11:26:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:26:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:27:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:27:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:27:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:27:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:27:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1989 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:27:36 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2023-11-11 11:28:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:28:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:28:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:29:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:29:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0215  0.9825  0.9753  0.9728  0.9721  0.9717  0.9716  0.9713  0.9711  0.9711  0.9709  0.9708  0.9708  0.9705  0.9702  0.9701
[17 : 32]:	0.9700  0.9700  0.9700  0.9700  0.9699  0.9697  0.9693  0.9692  0.9682  0.9682  0.9681  0.9678  0.9677  0.9676  0.9675  0.9673
[33 : 48]:	0.9672  0.9672  0.9671  0.9671  0.9671  0.9670  0.9667  0.9666  0.9666  0.9662  0.9662  0.9661  0.9660  0.9659  0.9659  0.9658
[49 : 64]:	0.9657  0.9657  0.9654  0.9650  0.9649  0.9648  0.9645  0.9642  0.9642  0.9641  0.9640  0.9639  0.9637  0.9636  0.9635  0.9633
2023-11-11 11:29:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 11:29:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #896: GFLOPs: 4948.6823. Time: 26.0376 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #897: GFLOPs: 6967.8277. Time: 18.4924 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #898: GFLOPs: 7003.1848. Time: 18.3991 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #899: GFLOPs: 6918.1423. Time: 18.6252 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #900: GFLOPs: 6911.1899. Time: 18.6440 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #901: GFLOPs: 6999.0391. Time: 18.4100 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #902: GFLOPs: 6917.0450. Time: 18.6282 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #903: GFLOPs: 7064.2712. Time: 18.2400 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #904: GFLOPs: 6737.5473. Time: 19.1245 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #905: GFLOPs: 6738.6083. Time: 19.1215 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #906: GFLOPs: 6841.6854. Time: 18.8334 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #907: GFLOPs: 6991.6647. Time: 18.4294 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #908: GFLOPs: 6972.2008. Time: 18.4808 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #909: GFLOPs: 6803.4990. Time: 18.9391 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #910: GFLOPs: 6916.9115. Time: 18.6285 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #911: GFLOPs: 6917.9525. Time: 18.6257 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #912: GFLOPs: 6844.9746. Time: 18.8243 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #913: GFLOPs: 6868.3692. Time: 18.7602 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #914: GFLOPs: 6984.4004. Time: 18.4485 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #915: GFLOPs: 6870.0473. Time: 18.7556 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #916: GFLOPs: 6642.7126. Time: 19.3975 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #917: GFLOPs: 6916.4383. Time: 18.6298 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #918: GFLOPs: 6917.4320. Time: 18.6271 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #919: GFLOPs: 6915.4450. Time: 18.6325 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #920: GFLOPs: 6913.7423. Time: 18.6371 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #921: GFLOPs: 6925.1088. Time: 18.6065 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #922: GFLOPs: 6916.4870. Time: 18.6297 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #923: GFLOPs: 7018.0936. Time: 18.3600 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #924: GFLOPs: 7003.4711. Time: 18.3983 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #925: GFLOPs: 6818.6656. Time: 18.8969 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #926: GFLOPs: 6914.8130. Time: 18.6342 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #927: GFLOPs: 6727.6738. Time: 19.1525 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #928: GFLOPs: 6918.0478. Time: 18.6255 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #929: GFLOPs: 6798.6129. Time: 18.9527 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #930: GFLOPs: 6847.5710. Time: 18.8172 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #931: GFLOPs: 6914.7352. Time: 18.6344 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #932: GFLOPs: 6810.7112. Time: 18.9190 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #933: GFLOPs: 6916.9587. Time: 18.6284 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #934: GFLOPs: 6880.9966. Time: 18.7258 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #935: GFLOPs: 6829.3911. Time: 18.8673 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #936: GFLOPs: 6918.1423. Time: 18.6252 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #937: GFLOPs: 6921.1263. Time: 18.6172 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #938: GFLOPs: 6853.7921. Time: 18.8001 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #939: GFLOPs: 6867.1828. Time: 18.7634 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #940: GFLOPs: 6635.1604. Time: 19.4196 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #941: GFLOPs: 6864.8683. Time: 18.7698 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #942: GFLOPs: 6879.8650. Time: 18.7289 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #943: GFLOPs: 6806.7219. Time: 18.9301 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #944: GFLOPs: 6896.6208. Time: 18.6833 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #945: GFLOPs: 6767.3077. Time: 19.0404 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #946: GFLOPs: 6804.0575. Time: 18.9375 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #947: GFLOPs: 7021.9269. Time: 18.3499 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #948: GFLOPs: 6866.0342. Time: 18.7666 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #949: GFLOPs: 6821.4647. Time: 18.8892 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #950: GFLOPs: 6832.5763. Time: 18.8585 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #951: GFLOPs: 6726.8868. Time: 19.1548 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #952: GFLOPs: 6960.2481. Time: 18.5126 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #953: GFLOPs: 6921.5528. Time: 18.6160 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #954: GFLOPs: 6812.5010. Time: 18.9140 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #955: GFLOPs: 6892.7649. Time: 18.6938 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #956: GFLOPs: 6833.9476. Time: 18.8547 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #957: GFLOPs: 43.6382. Time: 2952.7341 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #958: GFLOPs: 2520.4474. Time: 51.1227 us. Best GFLOPs: 7101.6357
2023-11-11 11:30:12 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #959: GFLOPs: 1405.1596. Time: 91.6992 us. Best GFLOPs: 7101.6357
2023-11-11 11:35:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:35:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:36:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 2402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:36:43 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2023-11-11 11:37:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:37:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:38:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:38:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310baa6bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310ee96cb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e88f928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310ecfc208)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310e9e1da8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e897a78)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310dc8fe28)]: 0 failure(s)
2023-11-11 11:38:39 [INFO] [evolutionary_search.cc:649] Scores of the best 41 candidates:
[1 : 16]:	0.9887  0.9879  0.9878  0.9849  0.9840  0.9838  0.9829  0.9817  0.9810  0.9785  0.9759  0.9751  0.9750  0.9744  0.9741  0.9740
[17 : 32]:	0.9736  0.9736  0.9736  0.9736  0.9734  0.9722  0.9721  0.9721  0.9713  0.9709  0.9709  0.9708  0.9707  0.9706  0.9705  0.9704
[33 : 41]:	0.9700  0.9696  0.9695  0.9695  0.9691  0.9691  0.9684  0.9683  0.9682
2023-11-11 11:38:39 [INFO] [evolutionary_search.cc:727] Got 41 candidate(s) with evolutionary search
2023-11-11 11:38:39 [INFO] [evolutionary_search.cc:730] Sending 41 candidates(s) for measurement
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #960: GFLOPs: 7089.9820. Time: 18.1738 us. Best GFLOPs: 7101.6357
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #961: GFLOPs: 7040.9139. Time: 18.3005 us. Best GFLOPs: 7101.6357
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #962: GFLOPs: 7044.0037. Time: 18.2924 us. Best GFLOPs: 7101.6357
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #963: GFLOPs: 7049.3104. Time: 18.2787 us. Best GFLOPs: 7101.6357
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #964: GFLOPs: 7076.5188. Time: 18.2084 us. Best GFLOPs: 7101.6357
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #965: GFLOPs: 7102.5155. Time: 18.1417 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #966: GFLOPs: 7052.4334. Time: 18.2706 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #967: GFLOPs: 7042.5051. Time: 18.2963 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #968: GFLOPs: 7088.4544. Time: 18.1777 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #969: GFLOPs: 7101.5395. Time: 18.1442 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #970: GFLOPs: 7067.7172. Time: 18.2311 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #971: GFLOPs: 6972.7297. Time: 18.4794 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #972: GFLOPs: 7102.2139. Time: 18.1425 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #973: GFLOPs: 7098.0229. Time: 18.1532 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #974: GFLOPs: 7010.9475. Time: 18.3787 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #975: GFLOPs: 6996.1350. Time: 18.4176 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #976: GFLOPs: 6997.3047. Time: 18.4145 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #977: GFLOPs: 7000.2302. Time: 18.4068 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #978: GFLOPs: 6996.8369. Time: 18.4157 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #979: GFLOPs: 6457.7864. Time: 19.9530 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #980: GFLOPs: 7025.7751. Time: 18.3399 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #981: GFLOPs: 6991.5223. Time: 18.4297 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #982: GFLOPs: 7040.7695. Time: 18.3008 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #983: GFLOPs: 7003.4522. Time: 18.3984 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #984: GFLOPs: 7010.2489. Time: 18.3805 us. Best GFLOPs: 7102.5155
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #985: GFLOPs: 7109.2902. Time: 18.1244 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #986: GFLOPs: 7019.5789. Time: 18.3561 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #987: GFLOPs: 7028.5119. Time: 18.3328 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #988: GFLOPs: 7008.6253. Time: 18.3848 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #989: GFLOPs: 6974.8946. Time: 18.4737 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #990: GFLOPs: 6966.4245. Time: 18.4961 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #991: GFLOPs: 7023.1736. Time: 18.3467 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #992: GFLOPs: 6966.7550. Time: 18.4953 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #993: GFLOPs: 6491.7176. Time: 19.8487 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #994: GFLOPs: 6966.3774. Time: 18.4963 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #995: GFLOPs: 7001.8975. Time: 18.4024 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #996: GFLOPs: 7016.3532. Time: 18.3645 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #997: GFLOPs: 6973.8402. Time: 18.4765 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #998: GFLOPs: 7010.1535. Time: 18.3808 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #999: GFLOPs: 817.1324. Time: 157.6880 us. Best GFLOPs: 7109.2902
2023-11-11 11:39:11 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #1000: GFLOPs: 1579.4642. Time: 81.5795 us. Best GFLOPs: 7109.2902
