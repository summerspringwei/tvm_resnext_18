2023-11-10 23:34:05 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add"
2023-11-10 23:34:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(196), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, v_ax2, v_ax3]
2023-11-10 23:34:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-11-10 23:34:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(168), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(32) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(2), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                            T.writes(T_add[v_n, v_co, v_h, v_w])
                            T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 8, 1, 2, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
sch.reverse_compute_inline(block=b4)
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2023-11-10 23:34:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(168), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(32) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(2), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                            T.writes(T_add[v_n, v_co, v_h, v_w])
                            T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 8, 1, 2, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
l118 = sch.fuse(l89, preserve_unit_iters=True)
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2023-11-10 23:34:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(168), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(32) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(2), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(56) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(16) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                            T.writes(T_add[v_n, v_co, v_h, v_w])
                            T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 8, 1, 2, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 7, 1, 14, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
l118 = sch.fuse(l89, preserve_unit_iters=True)
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2023-11-10 23:39:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-10 23:39:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-11-10 23:39:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:39:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:40:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1484 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:40:05 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2023-11-10 23:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:40:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:41:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:41:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-10 23:41:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9994  0.9971  0.9960  0.9954  0.9954  0.9951  0.9935  0.9925  0.9921  0.9913  0.9903  0.9886  0.9876  0.9848  0.9844
[17 : 32]:	0.9841  0.9839  0.9830  0.9822  0.9813  0.9801  0.9792  0.9788  0.9787  0.9783  0.9779  0.9774  0.9764  0.9757  0.9756  0.9749
[33 : 48]:	0.9747  0.9721  0.9719  0.9719  0.9718  0.9716  0.9710  0.9708  0.9703  0.9698  0.9697  0.9697  0.9696  0.9696  0.9690  0.9680
[49 : 64]:	0.9680  0.9678  0.9670  0.9663  0.9661  0.9654  0.9645  0.9635  0.9632  0.9622  0.9593  0.9590  0.9587  0.9581  0.9576  0.9547
2023-11-10 23:41:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-10 23:41:44 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #1: GFLOPs: 2141.5218. Time: 59.9810 us. Best GFLOPs: 2141.5218
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #2: GFLOPs: 19.9081. Time: 6452.1599 us. Best GFLOPs: 2141.5218
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #3: GFLOPs: 1089.8552. Time: 117.8602 us. Best GFLOPs: 2141.5218
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #4: GFLOPs: 2667.5915. Time: 48.1523 us. Best GFLOPs: 2667.5915
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #5: GFLOPs: 2724.4732. Time: 47.1469 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #6: GFLOPs: 2335.3062. Time: 55.0037 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #7: GFLOPs: 2122.5440. Time: 60.5173 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #8: GFLOPs: 2131.5607. Time: 60.2613 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #9: GFLOPs: 888.5110. Time: 144.5683 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #10: GFLOPs: 313.6736. Time: 409.5038 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #11: GFLOPs: 115.8276. Time: 1108.9808 us. Best GFLOPs: 2724.4732
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #12: GFLOPs: 3868.8366. Time: 33.2013 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #13: GFLOPs: 1966.5094. Time: 65.3191 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #14: GFLOPs: 174.2632. Time: 737.1068 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #15: GFLOPs: 1025.8076. Time: 125.2190 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #16: GFLOPs: 325.3059. Time: 394.8609 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #17: GFLOPs: 1714.2900. Time: 74.9293 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #18: GFLOPs: 3340.0433. Time: 38.4578 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #19: GFLOPs: 1090.4137. Time: 117.7998 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #20: GFLOPs: 2965.2367. Time: 43.3188 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #21: GFLOPs: 698.1462. Time: 183.9880 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #22: GFLOPs: 152.6299. Time: 841.5817 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #23: GFLOPs: 98.7616. Time: 1300.6130 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #24: GFLOPs: 1032.8120. Time: 124.3697 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #25: GFLOPs: 2824.3612. Time: 45.4795 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #26: GFLOPs: 1603.6719. Time: 80.0978 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #27: GFLOPs: 69.9142. Time: 1837.2608 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #28: GFLOPs: 88.0334. Time: 1459.1110 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(512))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 4, 4, 2, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 14, 14, 1, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[16, 1, 4])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
l118 = sch.fuse(l89, preserve_unit_iters=True)
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b96)
l135, l136 = sch.split(loop=l134, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b107)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #30: GFLOPs: 153.4872. Time: 836.8811 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #31: GFLOPs: 1677.4930. Time: 76.5729 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #32: GFLOPs: 699.1724. Time: 183.7180 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #33: GFLOPs: 2844.0532. Time: 45.1646 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #34: GFLOPs: 172.1304. Time: 746.2400 us. Best GFLOPs: 3868.8366
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #35: GFLOPs: 3898.4281. Time: 32.9493 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #36: GFLOPs: 3701.7062. Time: 34.7004 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #37: GFLOPs: 3526.0085. Time: 36.4295 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #38: GFLOPs: 455.8823. Time: 281.7625 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #39: GFLOPs: 2107.7145. Time: 60.9431 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #40: GFLOPs: 133.1472. Time: 964.7262 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(42), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), co_3_init * T.int64(16) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(504) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(504) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(504) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), co_3 * T.int64(16) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(64), ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 6, 1, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 16])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 7, 28, 1, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
sch.reverse_compute_inline(block=b4)
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b96)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 168, 3], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b107)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 168, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #42: GFLOPs: 1667.8409. Time: 77.0161 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #43: GFLOPs: 1761.8068. Time: 72.9084 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #44: GFLOPs: 171.5428. Time: 748.7962 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #45: GFLOPs: 1966.0855. Time: 65.3331 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #46: GFLOPs: 157.1802. Time: 817.2186 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #47: GFLOPs: 1662.3276. Time: 77.2715 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #48: GFLOPs: 250.3536. Time: 513.0765 us. Best GFLOPs: 3898.4281
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #49: GFLOPs: 3976.2591. Time: 32.3044 us. Best GFLOPs: 3976.2591
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #50: GFLOPs: 2137.4434. Time: 60.0954 us. Best GFLOPs: 3976.2591
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #51: GFLOPs: 464.4596. Time: 276.5592 us. Best GFLOPs: 3976.2591
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #52: GFLOPs: 4459.6852. Time: 28.8026 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #53: GFLOPs: 54.8268. Time: 2342.8405 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #54: GFLOPs: 153.5029. Time: 836.7957 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #55: GFLOPs: 594.1050. Time: 216.2085 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #56: GFLOPs: 3418.4228. Time: 37.5760 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #57: GFLOPs: 4155.9781. Time: 30.9074 us. Best GFLOPs: 4459.6852
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #58: GFLOPs: 5427.8717. Time: 23.6650 us. Best GFLOPs: 5427.8717
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #59: GFLOPs: 234.8250. Time: 547.0054 us. Best GFLOPs: 5427.8717
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #60: GFLOPs: 3439.7722. Time: 37.3428 us. Best GFLOPs: 5427.8717
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #61: GFLOPs: 240.5140. Time: 534.0669 us. Best GFLOPs: 5427.8717
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #62: GFLOPs: 227.1092. Time: 565.5893 us. Best GFLOPs: 5427.8717
2023-11-11 00:22:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #63: GFLOPs: 2007.8011. Time: 63.9757 us. Best GFLOPs: 5427.8717
2023-11-11 01:15:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 01:15:53 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2023-11-11 01:16:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 441 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:16:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 880 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:16:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1323 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:16:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1759 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:16:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 2199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:16:37 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2023-11-11 01:17:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:17:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:18:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:18:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 01:18:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4286  1.4188  1.4129  1.4092  1.4076  1.4070  1.4058  1.3999  1.3900  1.3893  1.3798  1.3746  1.3744  1.3738  1.3734  1.3711
[17 : 32]:	1.3701  1.3696  1.3675  1.3667  1.3666  1.3504  1.3502  1.3428  1.3370  1.3359  1.3119  1.3068  1.2942  1.2870  1.2812  1.2744
[33 : 48]:	1.2705  1.2686  1.2615  1.2615  1.2381  1.2264  1.2180  1.2176  1.2104  1.1653  1.1644  1.1456  1.1456  1.1442  1.1431  1.1408
[49 : 64]:	1.1381  1.1272  1.1211  1.1174  1.1142  1.1131  1.1128  1.1127  1.1046  1.0955  1.0822  1.0776  1.0540  1.0506  1.0466  1.0355
2023-11-11 01:18:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 01:18:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #64: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(36), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(512))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 2])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 49, 2, 2])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[8, 8, 1])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
sch.reverse_compute_inline(block=b4)
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b96)
l134, l135 = sch.split(loop=l133, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b107)
l141, l142 = sch.split(loop=l140, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b143 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b143, ann_key="meta_schedule.unroll_explicit")
b144, b145, b146, b147, b148, b149, b150, b151, b152 = sch.get_child_blocks(b143)
l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b144)
l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b145)
sch.annotate(block_or_loop=l159, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l159, ann_key="pragma_unroll_explicit", ann_val=1)
l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b146)
l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b147)
l177, l178, l179, l180, l181, l182 = sch.get_loops(block=b148)
l183, l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l183, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l183, ann_key="pragma_unroll_explicit", ann_val=1)
l197, l198, l199, l200, l201, l202, l203 = sch.get_loops(block=b150)
l204, l205, l206, l207, l208, l209, l210, l211 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l204, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l204, ann_key="pragma_unroll_explicit", ann_val=1)
l212, l213, l214, l215 = sch.get_loops(block=b152)
b216 = sch.get_block(name="data_pack", func_name="main")
l217, l218, l219, l220, l221, l222 = sch.get_loops(block=b216)
b223 = sch.decompose_reduction(block=b216, loop=l221)
b224 = sch.get_block(name="bgemm", func_name="main")
l225, l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238 = sch.get_loops(block=b224)
b239 = sch.decompose_reduction(block=b224, loop=l228)
b240 = sch.get_block(name="inverse", func_name="main")
l241, l242, l243, l244, l245, l246, l247, l248 = sch.get_loops(block=b240)
b249 = sch.decompose_reduction(block=b240, loop=l247)
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #65: GFLOPs: 2431.6358. Time: 52.8248 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #66: GFLOPs: 2666.6819. Time: 48.1687 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #67: GFLOPs: 1771.3506. Time: 72.5156 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #68: GFLOPs: 3305.8387. Time: 38.8557 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #69: GFLOPs: 3304.7548. Time: 38.8684 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #70: GFLOPs: 2426.7390. Time: 52.9313 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #71: GFLOPs: 2666.4371. Time: 48.1731 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #72: GFLOPs: 2419.1118. Time: 53.0982 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #73: GFLOPs: 2670.9489. Time: 48.0917 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #74: GFLOPs: 3293.9796. Time: 38.9956 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #75: GFLOPs: 2381.8908. Time: 53.9280 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #76: GFLOPs: 3365.7648. Time: 38.1639 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #77: GFLOPs: 2172.8311. Time: 59.1167 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #78: GFLOPs: 2305.5032. Time: 55.7148 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #79: GFLOPs: 2627.7589. Time: 48.8822 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #80: GFLOPs: 1859.3263. Time: 69.0845 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #81: GFLOPs: 3261.5104. Time: 39.3838 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #82: GFLOPs: 1908.0573. Time: 67.3201 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #83: GFLOPs: 2601.6822. Time: 49.3721 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #84: GFLOPs: 3366.7374. Time: 38.1528 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #85: GFLOPs: 3773.6364. Time: 34.0389 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #86: GFLOPs: 2180.8118. Time: 58.9003 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #87: GFLOPs: 3397.1978. Time: 37.8107 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #88: GFLOPs: 2673.6870. Time: 48.0425 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #89: GFLOPs: 3770.7099. Time: 34.0654 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #90: GFLOPs: 3041.2436. Time: 42.2362 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #91: GFLOPs: 2684.2724. Time: 47.8530 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #92: GFLOPs: 3010.2412. Time: 42.6712 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #93: GFLOPs: 2762.2319. Time: 46.5025 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #94: GFLOPs: 3840.3745. Time: 33.4474 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #95: GFLOPs: 3036.3346. Time: 42.3045 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #96: GFLOPs: 2709.1945. Time: 47.4128 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #97: GFLOPs: 5134.3661. Time: 25.0178 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #98: GFLOPs: 2164.9601. Time: 59.3316 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #99: GFLOPs: 2057.4785. Time: 62.4311 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #100: GFLOPs: 2599.6034. Time: 49.4116 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #101: GFLOPs: 1889.2711. Time: 67.9895 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #102: GFLOPs: 2693.3064. Time: 47.6925 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #103: GFLOPs: 2942.6503. Time: 43.6513 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #104: GFLOPs: 2540.2375. Time: 50.5664 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #105: GFLOPs: 2420.9562. Time: 53.0578 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #106: GFLOPs: 2540.3694. Time: 50.5637 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #107: GFLOPs: 2458.4192. Time: 52.2493 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #108: GFLOPs: 2065.7197. Time: 62.1820 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #109: GFLOPs: 2450.2833. Time: 52.4227 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #110: GFLOPs: 2277.7744. Time: 56.3930 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #111: GFLOPs: 2701.1126. Time: 47.5547 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #112: GFLOPs: 1680.5788. Time: 76.4323 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #113: GFLOPs: 3524.9078. Time: 36.4408 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #114: GFLOPs: 2958.6178. Time: 43.4157 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #115: GFLOPs: 4578.4903. Time: 28.0552 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #116: GFLOPs: 2067.2891. Time: 62.1348 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #117: GFLOPs: 4574.3707. Time: 28.0805 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #118: GFLOPs: 2290.9153. Time: 56.0695 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #119: GFLOPs: 3031.4782. Time: 42.3723 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #120: GFLOPs: 3983.7935. Time: 32.2433 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #121: GFLOPs: 3770.7847. Time: 34.0647 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #122: GFLOPs: 2882.1190. Time: 44.5681 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #123: GFLOPs: 3886.3062. Time: 33.0521 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #124: GFLOPs: 3807.2777. Time: 33.7382 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #125: GFLOPs: 2063.8264. Time: 62.2390 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #126: GFLOPs: 1724.3639. Time: 74.4916 us. Best GFLOPs: 5427.8717
2023-11-11 01:19:25 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #127: GFLOPs: 1520.1795. Time: 84.4970 us. Best GFLOPs: 5427.8717
2023-11-11 02:20:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 02:20:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 02:20:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:20:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 793 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:20:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:20:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1590 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:20:39 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2023-11-11 02:21:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 147 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:21:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:22:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:22:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 02:22:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3158  1.1519  1.1092  0.9888  0.9817  0.9789  0.9727  0.9717  0.9692  0.9688  0.9621  0.9580  0.9561  0.9479  0.9477  0.9467
[17 : 32]:	0.9428  0.9418  0.9401  0.9294  0.9290  0.9277  0.9272  0.9238  0.9237  0.9234  0.9200  0.9177  0.9136  0.9128  0.9122  0.9113
[33 : 48]:	0.9105  0.9104  0.9098  0.9087  0.9081  0.9068  0.9060  0.9055  0.9040  0.9038  0.9038  0.9037  0.9033  0.9017  0.9016  0.8998
[49 : 64]:	0.8998  0.8994  0.8984  0.8971  0.8969  0.8949  0.8941  0.8935  0.8932  0.8931  0.8909  0.8883  0.8867  0.8857  0.8844  0.8817
2023-11-11 02:22:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 02:22:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #128: GFLOPs: 1519.1975. Time: 84.5516 us. Best GFLOPs: 5427.8717
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #129: GFLOPs: 1565.5928. Time: 82.0460 us. Best GFLOPs: 5427.8717
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #130: GFLOPs: 2310.1661. Time: 55.6023 us. Best GFLOPs: 5427.8717
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #131: GFLOPs: 5491.4037. Time: 23.3912 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #132: GFLOPs: 2555.7809. Time: 50.2588 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #133: GFLOPs: 5134.7931. Time: 25.0157 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #134: GFLOPs: 5488.7132. Time: 23.4027 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #135: GFLOPs: 1977.4891. Time: 64.9564 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #136: GFLOPs: 5291.0506. Time: 24.2769 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #137: GFLOPs: 5310.5055. Time: 24.1880 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #138: GFLOPs: 2312.8218. Time: 55.5385 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #139: GFLOPs: 2556.6878. Time: 50.2410 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #140: GFLOPs: 5191.9467. Time: 24.7403 us. Best GFLOPs: 5491.4037
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #141: GFLOPs: 5672.1243. Time: 22.6459 us. Best GFLOPs: 5672.1243
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #142: GFLOPs: 5447.7857. Time: 23.5785 us. Best GFLOPs: 5672.1243
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #143: GFLOPs: 5178.2016. Time: 24.8060 us. Best GFLOPs: 5672.1243
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #144: GFLOPs: 5771.8238. Time: 22.2548 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #145: GFLOPs: 4446.6344. Time: 28.8871 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #146: GFLOPs: 1138.4479. Time: 112.8295 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #147: GFLOPs: 5297.4132. Time: 24.2478 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #148: GFLOPs: 4576.3991. Time: 28.0680 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #149: GFLOPs: 5000.3349. Time: 25.6884 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #150: GFLOPs: 5172.7235. Time: 24.8323 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #151: GFLOPs: 5455.1378. Time: 23.5467 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #152: GFLOPs: 4873.9147. Time: 26.3547 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #153: GFLOPs: 4078.7183. Time: 31.4929 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #154: GFLOPs: 5666.5981. Time: 22.6680 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #155: GFLOPs: 5054.0846. Time: 25.4152 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #156: GFLOPs: 5386.4451. Time: 23.8470 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #157: GFLOPs: 4214.4269. Time: 30.4788 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #158: GFLOPs: 4752.5994. Time: 27.0274 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #159: GFLOPs: 4177.5504. Time: 30.7478 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #160: GFLOPs: 5458.7371. Time: 23.5312 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #161: GFLOPs: 1052.9518. Time: 121.9909 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #162: GFLOPs: 4844.7608. Time: 26.5133 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #163: GFLOPs: 5580.7015. Time: 23.0169 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #164: GFLOPs: 5675.7984. Time: 22.6313 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #165: GFLOPs: 5337.3870. Time: 24.0662 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #166: GFLOPs: 4309.8278. Time: 29.8041 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #167: GFLOPs: 5054.0524. Time: 25.4154 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #168: GFLOPs: 4812.0736. Time: 26.6934 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #169: GFLOPs: 5270.7214. Time: 24.3706 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #170: GFLOPs: 5393.4495. Time: 23.8160 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #171: GFLOPs: 5303.1177. Time: 24.2217 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #172: GFLOPs: 5417.9553. Time: 23.7083 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #173: GFLOPs: 5722.0586. Time: 22.4483 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #174: GFLOPs: 4288.7248. Time: 29.9508 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #175: GFLOPs: 5426.0492. Time: 23.6729 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #176: GFLOPs: 5434.1937. Time: 23.6375 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #177: GFLOPs: 5495.6744. Time: 23.3730 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #178: GFLOPs: 5212.7372. Time: 24.6417 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #179: GFLOPs: 4373.2837. Time: 29.3717 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #180: GFLOPs: 5314.7053. Time: 24.1689 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #181: GFLOPs: 5274.7890. Time: 24.3518 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #182: GFLOPs: 5519.7692. Time: 23.2710 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #183: GFLOPs: 5036.9721. Time: 25.5015 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #184: GFLOPs: 4739.7078. Time: 27.1009 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #185: GFLOPs: 5058.7158. Time: 25.3919 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #186: GFLOPs: 5281.9921. Time: 24.3186 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #187: GFLOPs: 5000.4017. Time: 25.6880 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #188: GFLOPs: 4875.1490. Time: 26.3480 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #189: GFLOPs: 3001.6240. Time: 42.7937 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #190: GFLOPs: 1954.1967. Time: 65.7306 us. Best GFLOPs: 5771.8238
2023-11-11 02:23:23 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #191: GFLOPs: 2201.3398. Time: 58.3511 us. Best GFLOPs: 5771.8238
2023-11-11 03:25:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 03:25:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 03:25:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:25:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 802 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:25:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:25:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1597 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:26:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1991 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:26:05 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2023-11-11 03:26:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:27:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:27:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:27:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 03:28:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4687  1.4503  1.3624  1.3477  1.3435  1.3404  1.3087  1.2445  1.2300  1.2262  1.2183  1.2116  1.1056  1.0944  1.0857  1.0788
[17 : 32]:	1.0788  1.0641  1.0576  1.0450  1.0210  1.0197  1.0151  1.0114  0.9973  0.9888  0.9814  0.9774  0.9770  0.9755  0.9709  0.9705
[33 : 48]:	0.9694  0.9689  0.9685  0.9669  0.9653  0.9650  0.9639  0.9633  0.9603  0.9603  0.9598  0.9588  0.9579  0.9562  0.9556  0.9547
[49 : 64]:	0.9547  0.9542  0.9537  0.9532  0.9530  0.9525  0.9520  0.9516  0.9511  0.9500  0.9488  0.9465  0.9443  0.9443  0.9436  0.9427
2023-11-11 03:28:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 03:28:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #192: GFLOPs: 2422.2616. Time: 53.0292 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #193: GFLOPs: 4383.3736. Time: 29.3040 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #194: GFLOPs: 2217.7274. Time: 57.9199 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #195: GFLOPs: 3333.1694. Time: 38.5371 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #196: GFLOPs: 3743.6483. Time: 34.3116 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #197: GFLOPs: 3322.5827. Time: 38.6599 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #198: GFLOPs: 1993.2882. Time: 64.4415 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #199: GFLOPs: 3049.2491. Time: 42.1253 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #200: GFLOPs: 4116.6420. Time: 31.2028 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #201: GFLOPs: 2865.5617. Time: 44.8256 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #202: GFLOPs: 3564.6794. Time: 36.0343 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #203: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(12) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(4) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(16) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(49)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(12) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(4) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(12) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(12544))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 4, 8, 2])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 7])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
sch.reverse_compute_inline(block=b4)
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b96)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 36, 4], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b107)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 36, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #204: GFLOPs: 2041.4781. Time: 62.9204 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #205: GFLOPs: 3342.1773. Time: 38.4332 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #206: GFLOPs: 3097.7682. Time: 41.4655 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #207: GFLOPs: 3137.9495. Time: 40.9346 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #208: GFLOPs: 3143.7917. Time: 40.8585 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #209: GFLOPs: 4401.9901. Time: 29.1801 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #210: GFLOPs: 3311.4376. Time: 38.7900 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #211: GFLOPs: 2619.7062. Time: 49.0324 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #212: GFLOPs: 3747.9746. Time: 34.2720 us. Best GFLOPs: 5771.8238
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #213: GFLOPs: 5989.8222. Time: 21.4448 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #214: GFLOPs: 4029.4294. Time: 31.8781 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #215: GFLOPs: 3966.6015. Time: 32.3830 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #216: GFLOPs: 1718.6551. Time: 74.7390 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #217: GFLOPs: 4262.4066. Time: 30.1357 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #218: GFLOPs: 1172.6168. Time: 109.5418 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #219: GFLOPs: 5823.1433. Time: 22.0586 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #220: GFLOPs: 1195.7242. Time: 107.4249 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #221: GFLOPs: 5987.6399. Time: 21.4526 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #222: GFLOPs: 5779.2884. Time: 22.2260 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #223: GFLOPs: 3117.4893. Time: 41.2032 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #224: GFLOPs: 5710.7668. Time: 22.4927 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #225: GFLOPs: 5744.3478. Time: 22.3612 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #226: GFLOPs: 2204.6409. Time: 58.2637 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #227: GFLOPs: 5823.6945. Time: 22.0565 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #228: GFLOPs: 5425.6878. Time: 23.6745 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #229: GFLOPs: 5104.3644. Time: 25.1648 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #230: GFLOPs: 5791.5227. Time: 22.1791 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #231: GFLOPs: 5438.7440. Time: 23.6177 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #232: GFLOPs: 5796.8818. Time: 22.1586 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #233: GFLOPs: 5858.1245. Time: 21.9269 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #234: GFLOPs: 5785.9626. Time: 22.2004 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #235: GFLOPs: 2878.2309. Time: 44.6283 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #236: GFLOPs: 5353.3921. Time: 23.9942 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #237: GFLOPs: 5307.6443. Time: 24.2010 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #238: GFLOPs: 5401.7973. Time: 23.7792 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #239: GFLOPs: 5645.5904. Time: 22.7524 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #240: GFLOPs: 5769.1579. Time: 22.2650 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #241: GFLOPs: 5716.5141. Time: 22.4701 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #242: GFLOPs: 4192.9025. Time: 30.6352 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #243: GFLOPs: 5340.5149. Time: 24.0521 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #244: GFLOPs: 5054.8989. Time: 25.4111 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #245: GFLOPs: 5551.5989. Time: 23.1376 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #246: GFLOPs: 2294.1857. Time: 55.9896 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #247: GFLOPs: 5636.4344. Time: 22.7893 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #248: GFLOPs: 5680.0866. Time: 22.6142 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #249: GFLOPs: 5350.1362. Time: 24.0088 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #250: GFLOPs: 5544.8280. Time: 23.1658 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #251: GFLOPs: 5557.3368. Time: 23.1137 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #252: GFLOPs: 2439.9767. Time: 52.6442 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #253: GFLOPs: 1645.9468. Time: 78.0405 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #254: GFLOPs: 1242.2987. Time: 103.3975 us. Best GFLOPs: 5989.8222
2023-11-11 03:28:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #255: GFLOPs: 2242.1520. Time: 57.2890 us. Best GFLOPs: 5989.8222
2023-11-11 04:15:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 04:15:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 04:15:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:15:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:16:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:16:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1604 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:16:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:16:18 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2023-11-11 04:16:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:17:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:17:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:18:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 04:18:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1503  1.1483  1.1477  1.1347  1.0851  1.0609  0.9937  0.9918  0.9910  0.9819  0.9802  0.9789  0.9783  0.9766  0.9759  0.9751
[17 : 32]:	0.9745  0.9743  0.9742  0.9693  0.9689  0.9685  0.9676  0.9676  0.9675  0.9670  0.9666  0.9663  0.9645  0.9641  0.9630  0.9630
[33 : 48]:	0.9627  0.9624  0.9613  0.9608  0.9601  0.9599  0.9598  0.9594  0.9591  0.9587  0.9584  0.9582  0.9580  0.9561  0.9557  0.9554
[49 : 64]:	0.9542  0.9536  0.9527  0.9526  0.9523  0.9513  0.9512  0.9499  0.9491  0.9489  0.9489  0.9489  0.9489  0.9488  0.9488  0.9486
2023-11-11 04:18:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 04:18:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #256: GFLOPs: 3818.7093. Time: 33.6372 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #257: GFLOPs: 3835.5454. Time: 33.4895 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #258: GFLOPs: 3818.7348. Time: 33.6369 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #259: GFLOPs: 3038.6173. Time: 42.2727 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #260: GFLOPs: 3811.5250. Time: 33.7006 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #261: GFLOPs: 282.2621. Time: 455.0755 us. Best GFLOPs: 5989.8222
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #262: GFLOPs: 5998.6888. Time: 21.4131 us. Best GFLOPs: 5998.6888
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #263: GFLOPs: 5896.5440. Time: 21.7840 us. Best GFLOPs: 5998.6888
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #264: GFLOPs: 5948.0609. Time: 21.5954 us. Best GFLOPs: 5998.6888
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #265: GFLOPs: 5951.6231. Time: 21.5824 us. Best GFLOPs: 5998.6888
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #266: GFLOPs: 5894.0963. Time: 21.7931 us. Best GFLOPs: 5998.6888
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #267: GFLOPs: 6107.2853. Time: 21.0323 us. Best GFLOPs: 6107.2853
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #268: GFLOPs: 4213.5398. Time: 30.4852 us. Best GFLOPs: 6107.2853
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #269: GFLOPs: 6107.5753. Time: 21.0314 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #270: GFLOPs: 5797.2499. Time: 22.1572 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #271: GFLOPs: 5909.4716. Time: 21.7364 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #272: GFLOPs: 5932.7658. Time: 21.6510 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #273: GFLOPs: 6001.8528. Time: 21.4018 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #274: GFLOPs: 5893.9377. Time: 21.7937 us. Best GFLOPs: 6107.5753
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #275: GFLOPs: 6263.7129. Time: 20.5071 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #276: GFLOPs: 5848.0559. Time: 21.9647 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #277: GFLOPs: 5836.4633. Time: 22.0083 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #278: GFLOPs: 5724.1408. Time: 22.4401 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #279: GFLOPs: 4081.8827. Time: 31.4685 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #280: GFLOPs: 5793.5087. Time: 22.1715 us. Best GFLOPs: 6263.7129
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #281: GFLOPs: 6758.2145. Time: 19.0066 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #282: GFLOPs: 6078.0604. Time: 21.1335 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #283: GFLOPs: 6080.4513. Time: 21.1252 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #284: GFLOPs: 5742.8167. Time: 22.3672 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #285: GFLOPs: 5797.6788. Time: 22.1555 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #286: GFLOPs: 5279.1435. Time: 24.3317 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #287: GFLOPs: 6468.4388. Time: 19.8580 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #288: GFLOPs: 6063.9241. Time: 21.1827 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #289: GFLOPs: 5787.0893. Time: 22.1961 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #290: GFLOPs: 5714.1298. Time: 22.4795 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #291: GFLOPs: 5947.0753. Time: 21.5989 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #292: GFLOPs: 5842.8055. Time: 21.9844 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #293: GFLOPs: 5853.0832. Time: 21.9458 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #294: GFLOPs: 5931.4783. Time: 21.6557 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #295: GFLOPs: 6346.2844. Time: 20.2403 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #296: GFLOPs: 5757.9740. Time: 22.3083 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #297: GFLOPs: 5851.8904. Time: 21.9503 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #298: GFLOPs: 5106.3682. Time: 25.1550 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #299: GFLOPs: 5904.8026. Time: 21.7536 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #300: GFLOPs: 5068.2321. Time: 25.3443 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #301: GFLOPs: 5706.9126. Time: 22.5079 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #302: GFLOPs: 5889.0946. Time: 21.8116 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #303: GFLOPs: 5627.4304. Time: 22.8258 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #304: GFLOPs: 6375.3616. Time: 20.1480 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #305: GFLOPs: 6103.2464. Time: 21.0463 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #306: GFLOPs: 4961.0863. Time: 25.8916 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #307: GFLOPs: 5486.7711. Time: 23.4110 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #308: GFLOPs: 5846.9278. Time: 21.9689 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #309: GFLOPs: 5627.7372. Time: 22.8245 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #310: GFLOPs: 5473.5921. Time: 23.4673 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #311: GFLOPs: 5563.1523. Time: 23.0895 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #312: GFLOPs: 5732.6778. Time: 22.4067 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #313: GFLOPs: 5379.1905. Time: 23.8792 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #314: GFLOPs: 6008.9914. Time: 21.3764 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #315: GFLOPs: 5829.2262. Time: 22.0356 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #316: GFLOPs: 5835.5411. Time: 22.0118 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #317: GFLOPs: 629.0223. Time: 204.2067 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #318: GFLOPs: 366.1608. Time: 350.8036 us. Best GFLOPs: 6758.2145
2023-11-11 04:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #319: GFLOPs: 1930.6813. Time: 66.5312 us. Best GFLOPs: 6758.2145
2023-11-11 05:15:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 05:15:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 05:15:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:15:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:16:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:16:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:16:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1989 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:16:20 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2023-11-11 05:16:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:17:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:17:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:18:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 05:18:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1333  1.0945  1.0834  1.0694  1.0449  1.0376  1.0251  0.9739  0.9689  0.9671  0.9624  0.9603  0.9554  0.9537  0.9465  0.9456
[17 : 32]:	0.9434  0.9392  0.9351  0.9348  0.9334  0.9331  0.9330  0.9328  0.9321  0.9319  0.9312  0.9307  0.9296  0.9282  0.9278  0.9267
[33 : 48]:	0.9263  0.9255  0.9254  0.9250  0.9237  0.9234  0.9225  0.9213  0.9205  0.9203  0.9199  0.9189  0.9187  0.9179  0.9177  0.9176
[49 : 64]:	0.9176  0.9175  0.9172  0.9161  0.9158  0.9158  0.9158  0.9141  0.9141  0.9136  0.9136  0.9118  0.9118  0.9102  0.9097  0.9086
2023-11-11 05:18:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 05:18:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #320: GFLOPs: 5542.9190. Time: 23.1738 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #321: GFLOPs: 5373.0766. Time: 23.9063 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #322: GFLOPs: 4927.6029. Time: 26.0676 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #323: GFLOPs: 5556.5909. Time: 23.1168 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #324: GFLOPs: 5368.7200. Time: 23.9257 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #325: GFLOPs: 3996.8874. Time: 32.1376 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #326: GFLOPs: 5557.4252. Time: 23.1133 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #327: GFLOPs: 6489.3148. Time: 19.7942 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #328: GFLOPs: 6708.6118. Time: 19.1471 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #329: GFLOPs: 5599.0566. Time: 22.9415 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #330: GFLOPs: 6629.0455. Time: 19.3769 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #331: GFLOPs: 6175.8855. Time: 20.7987 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #332: GFLOPs: 6372.5204. Time: 20.1569 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #333: GFLOPs: 3217.0684. Time: 39.9278 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #334: GFLOPs: 6248.1276. Time: 20.5582 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #335: GFLOPs: 6699.7224. Time: 19.1725 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #336: GFLOPs: 6225.6461. Time: 20.6325 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #337: GFLOPs: 6627.2407. Time: 19.3822 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #338: GFLOPs: 6546.2740. Time: 19.6219 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #339: GFLOPs: 6187.7393. Time: 20.7589 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #340: GFLOPs: 5923.1627. Time: 21.6861 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #341: GFLOPs: 6420.0233. Time: 20.0078 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #342: GFLOPs: 6296.2261. Time: 20.4012 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #343: GFLOPs: 5930.5512. Time: 21.6591 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #344: GFLOPs: 6251.7696. Time: 20.5463 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #345: GFLOPs: 6545.0105. Time: 19.6257 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #346: GFLOPs: 6221.8785. Time: 20.6450 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #347: GFLOPs: 6412.6086. Time: 20.0309 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #348: GFLOPs: 6123.4328. Time: 20.9769 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #349: GFLOPs: 6416.7502. Time: 20.0180 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #350: GFLOPs: 6124.1244. Time: 20.9745 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #351: GFLOPs: 6211.4440. Time: 20.6797 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #352: GFLOPs: 6341.0000. Time: 20.2571 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #353: GFLOPs: 6068.3691. Time: 21.1672 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #354: GFLOPs: 6238.3950. Time: 20.5903 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #355: GFLOPs: 6053.1045. Time: 21.2206 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #356: GFLOPs: 6036.1677. Time: 21.2802 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #357: GFLOPs: 5848.3298. Time: 21.9636 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #358: GFLOPs: 6043.2534. Time: 21.2552 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #359: GFLOPs: 6410.5913. Time: 20.0372 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #360: GFLOPs: 6177.1752. Time: 20.7944 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #361: GFLOPs: 6070.4956. Time: 21.1598 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #362: GFLOPs: 6059.1044. Time: 21.1996 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #363: GFLOPs: 5981.4251. Time: 21.4749 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #364: GFLOPs: 6066.0958. Time: 21.1752 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #365: GFLOPs: 5928.6814. Time: 21.6660 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #366: GFLOPs: 5951.6636. Time: 21.5823 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #367: GFLOPs: 6488.9635. Time: 19.7952 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #368: GFLOPs: 6542.6821. Time: 19.6327 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #369: GFLOPs: 6660.4430. Time: 19.2856 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #370: GFLOPs: 6087.3951. Time: 21.1011 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #371: GFLOPs: 6064.8937. Time: 21.1794 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #372: GFLOPs: 5953.9367. Time: 21.5741 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #373: GFLOPs: 6057.6494. Time: 21.2047 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #374: GFLOPs: 6043.9943. Time: 21.2526 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #375: GFLOPs: 5918.8914. Time: 21.7018 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #376: GFLOPs: 6268.4183. Time: 20.4917 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #377: GFLOPs: 6126.0977. Time: 20.9678 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #378: GFLOPs: 6072.4572. Time: 21.1530 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #379: GFLOPs: 5913.1645. Time: 21.7228 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #380: GFLOPs: 6028.1479. Time: 21.3085 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #381: GFLOPs: 1786.1561. Time: 71.9145 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #382: GFLOPs: 102.6482. Time: 1251.3664 us. Best GFLOPs: 6758.2145
2023-11-11 05:18:52 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #383: GFLOPs: 1066.9843. Time: 120.3865 us. Best GFLOPs: 6758.2145
2023-11-11 06:13:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 06:13:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 06:14:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:14:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 791 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:14:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:14:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:14:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1991 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:14:37 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2023-11-11 06:15:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:15:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:15:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:16:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 06:16:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3317  1.3026  1.2947  1.2853  1.1257  1.1235  1.1177  1.1072  1.1030  1.0891  1.0289  1.0284  1.0195  1.0195  1.0192  1.0180
[17 : 32]:	1.0151  1.0034  1.0026  0.9994  0.9888  0.9863  0.9855  0.9846  0.9810  0.9798  0.9784  0.9769  0.9763  0.9762  0.9762  0.9761
[33 : 48]:	0.9761  0.9759  0.9728  0.9693  0.9672  0.9659  0.9657  0.9649  0.9636  0.9626  0.9580  0.9578  0.9576  0.9575  0.9570  0.9561
[49 : 64]:	0.9552  0.9549  0.9525  0.9523  0.9520  0.9485  0.9485  0.9483  0.9476  0.9471  0.9464  0.9455  0.9447  0.9435  0.9435  0.9432
2023-11-11 06:16:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 06:16:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #384: GFLOPs: 32.3241. Time: 3973.8288 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #385: GFLOPs: 32.2758. Time: 3979.7759 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #386: GFLOPs: 365.7003. Time: 351.2454 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #387: GFLOPs: 4553.0741. Time: 28.2118 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #388: GFLOPs: 5991.9657. Time: 21.4371 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #389: GFLOPs: 5928.7433. Time: 21.6657 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #390: GFLOPs: 6270.5607. Time: 20.4847 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #391: GFLOPs: 6075.6472. Time: 21.1419 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #392: GFLOPs: 5907.3954. Time: 21.7440 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #393: GFLOPs: 6231.3721. Time: 20.6135 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #394: GFLOPs: 6606.1547. Time: 19.4441 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #395: GFLOPs: 6588.7627. Time: 19.4954 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #396: GFLOPs: 6485.4842. Time: 19.8059 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #397: GFLOPs: 6487.9981. Time: 19.7982 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #398: GFLOPs: 4673.1121. Time: 27.4872 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #399: GFLOPs: 6679.5554. Time: 19.2304 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #400: GFLOPs: 6052.7133. Time: 21.2220 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #401: GFLOPs: 6280.5217. Time: 20.4522 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #402: GFLOPs: 4654.2043. Time: 27.5988 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #403: GFLOPs: 5942.7346. Time: 21.6147 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #404: GFLOPs: 6055.0732. Time: 21.2137 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #405: GFLOPs: 6172.0938. Time: 20.8115 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #406: GFLOPs: 6489.6223. Time: 19.7932 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #407: GFLOPs: 6182.4381. Time: 20.7767 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #408: GFLOPs: 6490.9688. Time: 19.7891 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #409: GFLOPs: 6693.2512. Time: 19.1911 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #410: GFLOPs: 4830.4711. Time: 26.5917 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #411: GFLOPs: 5844.3504. Time: 21.9786 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #412: GFLOPs: 6676.6561. Time: 19.2388 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #413: GFLOPs: 6376.4378. Time: 20.1446 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #414: GFLOPs: 6374.7605. Time: 20.1499 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #415: GFLOPs: 6490.0614. Time: 19.7919 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #416: GFLOPs: 6490.4129. Time: 19.7908 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #417: GFLOPs: 5650.8468. Time: 22.7312 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #418: GFLOPs: 6476.5193. Time: 19.8333 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #419: GFLOPs: 6050.3559. Time: 21.2302 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #420: GFLOPs: 5713.4614. Time: 22.4821 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #421: GFLOPs: 5975.9882. Time: 21.4944 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #422: GFLOPs: 6215.7065. Time: 20.6655 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #423: GFLOPs: 5776.1120. Time: 22.2382 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #424: GFLOPs: 5955.6156. Time: 21.5680 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #425: GFLOPs: 6382.8191. Time: 20.1244 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #426: GFLOPs: 6671.2177. Time: 19.2544 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #427: GFLOPs: 6399.0020. Time: 20.0735 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #428: GFLOPs: 6605.1474. Time: 19.4470 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #429: GFLOPs: 6616.2543. Time: 19.4144 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #430: GFLOPs: 6261.0116. Time: 20.5159 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #431: GFLOPs: 6627.9265. Time: 19.3802 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #432: GFLOPs: 6182.1038. Time: 20.7778 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #433: GFLOPs: 6372.7788. Time: 20.1561 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #434: GFLOPs: 6200.5403. Time: 20.7160 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #435: GFLOPs: 6621.8385. Time: 19.3980 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #436: GFLOPs: 6045.8895. Time: 21.2459 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #437: GFLOPs: 6619.9052. Time: 19.4037 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #438: GFLOPs: 6204.7339. Time: 20.7020 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #439: GFLOPs: 6037.3407. Time: 21.2760 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #440: GFLOPs: 6398.1780. Time: 20.0761 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #441: GFLOPs: 6544.9666. Time: 19.6259 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #442: GFLOPs: 6321.1988. Time: 20.3206 us. Best GFLOPs: 6758.2145
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #443: GFLOPs: 7012.0439. Time: 18.3186 us. Best GFLOPs: 7012.0439
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #444: GFLOPs: 6470.4462. Time: 19.8519 us. Best GFLOPs: 7012.0439
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #445: GFLOPs: 1471.6986. Time: 87.2805 us. Best GFLOPs: 7012.0439
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #446: GFLOPs: 2127.0460. Time: 60.3892 us. Best GFLOPs: 7012.0439
2023-11-11 06:17:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #447: GFLOPs: 195.4043. Time: 657.3578 us. Best GFLOPs: 7012.0439
2023-11-11 07:16:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 07:16:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 07:16:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:16:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:16:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:16:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:16:36 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2023-11-11 07:17:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:17:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:17:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:18:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 07:18:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0270  1.0163  0.9970  0.9625  0.9603  0.9595  0.9582  0.9537  0.9504  0.9500  0.9490  0.9489  0.9483  0.9482  0.9474  0.9473
[17 : 32]:	0.9466  0.9465  0.9464  0.9460  0.9444  0.9442  0.9441  0.9438  0.9437  0.9436  0.9431  0.9427  0.9426  0.9423  0.9423  0.9416
[33 : 48]:	0.9415  0.9415  0.9415  0.9414  0.9413  0.9412  0.9411  0.9411  0.9410  0.9408  0.9407  0.9402  0.9391  0.9389  0.9386  0.9386
[49 : 64]:	0.9379  0.9379  0.9376  0.9376  0.9375  0.9371  0.9367  0.9359  0.9358  0.9356  0.9351  0.9350  0.9349  0.9348  0.9342  0.9342
2023-11-11 07:18:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 07:18:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #448: GFLOPs: 5233.6594. Time: 24.5432 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #449: GFLOPs: 5300.5000. Time: 24.2337 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #450: GFLOPs: 2742.0630. Time: 46.8445 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #451: GFLOPs: 6976.6728. Time: 18.4114 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #452: GFLOPs: 6452.4682. Time: 19.9072 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #453: GFLOPs: 6837.9105. Time: 18.7851 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #454: GFLOPs: 5803.3791. Time: 22.1338 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #455: GFLOPs: 6982.4631. Time: 18.3962 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #456: GFLOPs: 6950.3849. Time: 18.4811 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #457: GFLOPs: 6658.1580. Time: 19.2922 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #458: GFLOPs: 6605.5609. Time: 19.4458 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #459: GFLOPs: 6676.3860. Time: 19.2395 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #460: GFLOPs: 6975.5264. Time: 18.4145 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #461: GFLOPs: 6582.5783. Time: 19.5137 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #462: GFLOPs: 6648.4396. Time: 19.3204 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #463: GFLOPs: 6988.3156. Time: 18.3808 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #464: GFLOPs: 6638.5486. Time: 19.3492 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #465: GFLOPs: 6835.3705. Time: 18.7920 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #466: GFLOPs: 6652.5232. Time: 19.3085 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #467: GFLOPs: 6642.7767. Time: 19.3369 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #468: GFLOPs: 6041.8177. Time: 21.2603 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #469: GFLOPs: 5790.8222. Time: 22.1817 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #470: GFLOPs: 6646.8534. Time: 19.3250 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #471: GFLOPs: 6602.6772. Time: 19.4543 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #472: GFLOPs: 6654.5078. Time: 19.3028 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #473: GFLOPs: 6564.1050. Time: 19.5686 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #474: GFLOPs: 6623.4583. Time: 19.3933 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #475: GFLOPs: 5510.7103. Time: 23.3093 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #476: GFLOPs: 6622.0024. Time: 19.3975 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #477: GFLOPs: 6625.3493. Time: 19.3877 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #478: GFLOPs: 6651.8427. Time: 19.3105 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #479: GFLOPs: 6111.4697. Time: 21.0179 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #480: GFLOPs: 6680.7972. Time: 19.2268 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #481: GFLOPs: 6969.1682. Time: 18.4313 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #482: GFLOPs: 6654.7695. Time: 19.3020 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #483: GFLOPs: 6613.2124. Time: 19.4233 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #484: GFLOPs: 6348.6480. Time: 20.2327 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #485: GFLOPs: 6526.5182. Time: 19.6813 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #486: GFLOPs: 6564.8015. Time: 19.5666 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #487: GFLOPs: 6662.6954. Time: 19.2791 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #488: GFLOPs: 6599.8704. Time: 19.4626 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #489: GFLOPs: 6594.6462. Time: 19.4780 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #490: GFLOPs: 6729.6593. Time: 19.0872 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #491: GFLOPs: 6509.7071. Time: 19.7322 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #492: GFLOPs: 6522.6785. Time: 19.6929 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #493: GFLOPs: 6448.0868. Time: 19.9207 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #494: GFLOPs: 6867.6933. Time: 18.7036 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #495: GFLOPs: 6944.6246. Time: 18.4964 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #496: GFLOPs: 6582.3114. Time: 19.5145 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #497: GFLOPs: 6565.1111. Time: 19.5656 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #498: GFLOPs: 6634.3267. Time: 19.3615 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #499: GFLOPs: 6658.1580. Time: 19.2922 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #500: GFLOPs: 6637.9708. Time: 19.3509 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #501: GFLOPs: 6494.3237. Time: 19.7789 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #502: GFLOPs: 6574.1876. Time: 19.5386 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #503: GFLOPs: 6582.7208. Time: 19.5133 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #504: GFLOPs: 6427.6905. Time: 19.9839 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #505: GFLOPs: 6599.9702. Time: 19.4623 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #506: GFLOPs: 6341.6954. Time: 20.2549 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #507: GFLOPs: 5943.2920. Time: 21.6127 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #508: GFLOPs: 6495.8132. Time: 19.7744 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #509: GFLOPs: 1504.3260. Time: 85.3874 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #510: GFLOPs: 88.9501. Time: 1444.0740 us. Best GFLOPs: 7012.0439
2023-11-11 07:19:15 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #511: GFLOPs: 184.6969. Time: 695.4667 us. Best GFLOPs: 7012.0439
2023-11-11 08:38:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 08:38:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 08:38:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:38:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:38:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:39:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1594 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:39:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1995 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:39:14 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2023-11-11 08:39:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:40:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:40:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:41:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 08:41:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0203  1.0177  1.0136  1.0047  1.0043  1.0014  0.9947  0.9943  0.9918  0.9890  0.9864  0.9843  0.9841  0.9840  0.9829  0.9827
[17 : 32]:	0.9818  0.9816  0.9815  0.9810  0.9800  0.9772  0.9770  0.9769  0.9761  0.9760  0.9758  0.9756  0.9722  0.9722  0.9721  0.9719
[33 : 48]:	0.9703  0.9699  0.9690  0.9689  0.9689  0.9688  0.9683  0.9680  0.9679  0.9677  0.9676  0.9674  0.9674  0.9671  0.9668  0.9656
[49 : 64]:	0.9654  0.9653  0.9651  0.9649  0.9646  0.9644  0.9641  0.9640  0.9639  0.9638  0.9638  0.9630  0.9627  0.9626  0.9625  0.9624
2023-11-11 08:41:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 08:41:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #512: GFLOPs: 6963.5025. Time: 18.4463 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #513: GFLOPs: 6963.1149. Time: 18.4473 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #514: GFLOPs: 5743.9580. Time: 22.3627 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #515: GFLOPs: 6938.2789. Time: 18.5133 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #516: GFLOPs: 6143.5770. Time: 20.9081 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #517: GFLOPs: 6957.4452. Time: 18.4623 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #518: GFLOPs: 6881.0510. Time: 18.6673 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #519: GFLOPs: 6986.6483. Time: 18.3851 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #520: GFLOPs: 6344.6810. Time: 20.2454 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #521: GFLOPs: 5716.1902. Time: 22.4714 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #522: GFLOPs: 5192.6453. Time: 24.7370 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #523: GFLOPs: 6608.2919. Time: 19.4378 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #524: GFLOPs: 4941.7475. Time: 25.9929 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #525: GFLOPs: 6528.8952. Time: 19.6742 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #526: GFLOPs: 6884.1538. Time: 18.6589 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #527: GFLOPs: 6615.9063. Time: 19.4154 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #528: GFLOPs: 6615.9897. Time: 19.4152 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #529: GFLOPs: 6958.2008. Time: 18.4603 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #530: GFLOPs: 6696.5530. Time: 19.1816 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #531: GFLOPs: 6554.6487. Time: 19.5969 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #532: GFLOPs: 6603.0447. Time: 19.4532 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #533: GFLOPs: 5941.4732. Time: 21.6193 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #534: GFLOPs: 6604.4371. Time: 19.4491 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #535: GFLOPs: 6790.3908. Time: 18.9165 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #536: GFLOPs: 6859.1329. Time: 18.7269 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #537: GFLOPs: 6923.8534. Time: 18.5519 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #538: GFLOPs: 6965.8119. Time: 18.4401 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #539: GFLOPs: 6444.2882. Time: 19.9325 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #540: GFLOPs: 6528.7478. Time: 19.6746 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #541: GFLOPs: 6483.3489. Time: 19.8124 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #542: GFLOPs: 4488.6493. Time: 28.6168 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #543: GFLOPs: 6971.0213. Time: 18.4264 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #544: GFLOPs: 6810.8314. Time: 18.8597 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #545: GFLOPs: 6520.2397. Time: 19.7003 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #546: GFLOPs: 6775.6172. Time: 18.9578 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #547: GFLOPs: 6521.1481. Time: 19.6975 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #548: GFLOPs: 6811.5208. Time: 18.8578 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #549: GFLOPs: 6570.8641. Time: 19.5485 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #550: GFLOPs: 6892.6284. Time: 18.6359 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #551: GFLOPs: 6575.2964. Time: 19.5353 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #552: GFLOPs: 6484.5783. Time: 19.8086 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #553: GFLOPs: 5491.0017. Time: 23.3929 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #554: GFLOPs: 6574.0548. Time: 19.5390 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #555: GFLOPs: 6969.7084. Time: 18.4298 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #556: GFLOPs: 6966.8528. Time: 18.4374 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #557: GFLOPs: 6517.8917. Time: 19.7074 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #558: GFLOPs: 6366.9327. Time: 20.1746 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #559: GFLOPs: 6359.4459. Time: 20.1984 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #560: GFLOPs: 6510.6355. Time: 19.7293 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #561: GFLOPs: 6586.7148. Time: 19.5015 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #562: GFLOPs: 6840.6957. Time: 18.7774 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #563: GFLOPs: 6894.2910. Time: 18.6314 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #564: GFLOPs: 6922.6937. Time: 18.5550 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #565: GFLOPs: 6405.1114. Time: 20.0544 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #566: GFLOPs: 6976.8554. Time: 18.4110 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #567: GFLOPs: 6900.3212. Time: 18.6152 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #568: GFLOPs: 6310.6605. Time: 20.3545 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #569: GFLOPs: 6945.0517. Time: 18.4953 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #570: GFLOPs: 6616.9837. Time: 19.4123 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #571: GFLOPs: 6705.4340. Time: 19.1562 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #572: GFLOPs: 6975.5738. Time: 18.4143 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #573: GFLOPs: 154.5473. Time: 831.1410 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #574: GFLOPs: 166.0220. Time: 773.6960 us. Best GFLOPs: 7012.0439
2023-11-11 08:41:48 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #575: GFLOPs: 1992.9144. Time: 64.4536 us. Best GFLOPs: 7012.0439
2023-11-11 09:15:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 09:15:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 09:15:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:15:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 794 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:16:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1193 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:16:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1594 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:16:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1991 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:16:20 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2023-11-11 09:16:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:17:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:17:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:18:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 09:18:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0205  1.0193  1.0189  1.0092  1.0089  1.0079  1.0076  1.0063  1.0063  1.0056  1.0049  1.0045  1.0040  1.0038  1.0020  1.0018
[17 : 32]:	1.0015  1.0014  1.0005  0.9999  0.9993  0.9984  0.9983  0.9979  0.9977  0.9977  0.9971  0.9967  0.9966  0.9964  0.9955  0.9906
[33 : 48]:	0.9884  0.9876  0.9875  0.9874  0.9864  0.9861  0.9858  0.9846  0.9843  0.9841  0.9839  0.9839  0.9834  0.9831  0.9830  0.9827
[49 : 64]:	0.9825  0.9822  0.9820  0.9819  0.9818  0.9814  0.9813  0.9810  0.9802  0.9798  0.9793  0.9793  0.9792  0.9791  0.9784  0.9782
2023-11-11 09:18:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 09:18:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #576: GFLOPs: 6978.4097. Time: 18.4069 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #577: GFLOPs: 6996.5171. Time: 18.3592 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #578: GFLOPs: 7003.4647. Time: 18.3410 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #579: GFLOPs: 6996.6124. Time: 18.3590 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #580: GFLOPs: 6996.2779. Time: 18.3598 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #581: GFLOPs: 7005.0251. Time: 18.3369 us. Best GFLOPs: 7012.0439
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #582: GFLOPs: 7015.2391. Time: 18.3102 us. Best GFLOPs: 7015.2391
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #583: GFLOPs: 6997.7801. Time: 18.3559 us. Best GFLOPs: 7015.2391
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #584: GFLOPs: 7028.8996. Time: 18.2746 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #585: GFLOPs: 7003.5421. Time: 18.3408 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #586: GFLOPs: 6964.6761. Time: 18.4431 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #587: GFLOPs: 7013.1228. Time: 18.3157 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #588: GFLOPs: 6962.9261. Time: 18.4478 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #589: GFLOPs: 6845.6953. Time: 18.7637 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #590: GFLOPs: 6923.5266. Time: 18.5528 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #591: GFLOPs: 6620.9404. Time: 19.4007 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #592: GFLOPs: 6914.9509. Time: 18.5758 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #593: GFLOPs: 6503.1307. Time: 19.7521 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #594: GFLOPs: 6625.3640. Time: 19.3877 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #595: GFLOPs: 7007.1794. Time: 18.3313 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #596: GFLOPs: 6974.8617. Time: 18.4162 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #597: GFLOPs: 6706.1618. Time: 19.1541 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #598: GFLOPs: 7012.8336. Time: 18.3165 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #599: GFLOPs: 6849.1107. Time: 18.7543 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #600: GFLOPs: 6992.8425. Time: 18.3689 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #601: GFLOPs: 6508.6032. Time: 19.7355 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #602: GFLOPs: 6816.0780. Time: 18.8452 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #603: GFLOPs: 6978.1659. Time: 18.4075 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #604: GFLOPs: 6797.5168. Time: 18.8967 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #605: GFLOPs: 6505.9539. Time: 19.7435 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #606: GFLOPs: 6620.1000. Time: 19.4031 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #607: GFLOPs: 7012.4988. Time: 18.3174 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #608: GFLOPs: 6730.3221. Time: 19.0854 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #609: GFLOPs: 6589.3414. Time: 19.4937 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #610: GFLOPs: 6621.8422. Time: 19.3980 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #611: GFLOPs: 6664.3026. Time: 19.2744 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #612: GFLOPs: 6568.0611. Time: 19.5568 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #613: GFLOPs: 6992.0801. Time: 18.3709 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #614: GFLOPs: 6540.8386. Time: 19.6382 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #615: GFLOPs: 6601.8819. Time: 19.4567 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #616: GFLOPs: 6686.7948. Time: 19.2096 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #617: GFLOPs: 6755.2115. Time: 19.0150 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #618: GFLOPs: 5772.3589. Time: 22.2527 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #619: GFLOPs: 6946.6040. Time: 18.4911 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #620: GFLOPs: 6612.2264. Time: 19.4262 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #621: GFLOPs: 6591.5656. Time: 19.4871 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #622: GFLOPs: 6675.0819. Time: 19.2433 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #623: GFLOPs: 6617.8009. Time: 19.4099 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #624: GFLOPs: 6943.5464. Time: 18.4993 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #625: GFLOPs: 6922.1712. Time: 18.5564 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #626: GFLOPs: 5770.6868. Time: 22.2591 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #627: GFLOPs: 6935.2338. Time: 18.5214 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #628: GFLOPs: 7025.6808. Time: 18.2830 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #629: GFLOPs: 6659.8296. Time: 19.2874 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #630: GFLOPs: 6660.1878. Time: 19.2863 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #631: GFLOPs: 6682.3290. Time: 19.2224 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #632: GFLOPs: 6943.9673. Time: 18.4982 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #633: GFLOPs: 6720.2129. Time: 19.1141 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #634: GFLOPs: 6956.4542. Time: 18.4649 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #635: GFLOPs: 6660.1878. Time: 19.2863 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #636: GFLOPs: 6655.4461. Time: 19.3001 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #637: GFLOPs: 3063.6768. Time: 41.9269 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #638: GFLOPs: 3002.1839. Time: 42.7857 us. Best GFLOPs: 7028.8996
2023-11-11 09:18:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #639: GFLOPs: 3122.2589. Time: 41.1403 us. Best GFLOPs: 7028.8996
2023-11-11 10:15:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 10:15:18 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 10:15:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:15:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:15:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1193 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:15:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1594 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:15:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1996 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:15:57 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2023-11-11 10:16:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:16:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:17:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:17:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:17:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0014  1.0014  1.0011  1.0006  1.0001  0.9997  0.9987  0.9976  0.9971  0.9963  0.9963  0.9959  0.9948  0.9944  0.9943  0.9925
[17 : 32]:	0.9916  0.9912  0.9908  0.9905  0.9905  0.9903  0.9902  0.9902  0.9898  0.9896  0.9895  0.9894  0.9894  0.9890  0.9889  0.9880
[33 : 48]:	0.9880  0.9880  0.9876  0.9873  0.9866  0.9864  0.9860  0.9850  0.9848  0.9848  0.9839  0.9838  0.9835  0.9830  0.9829  0.9827
[49 : 64]:	0.9827  0.9825  0.9823  0.9819  0.9814  0.9813  0.9811  0.9810  0.9808  0.9807  0.9805  0.9801  0.9799  0.9798  0.9797  0.9796
2023-11-11 10:17:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 10:17:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #640: GFLOPs: 7053.6144. Time: 18.2106 us. Best GFLOPs: 7053.6144
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #641: GFLOPs: 7047.6573. Time: 18.2260 us. Best GFLOPs: 7053.6144
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #642: GFLOPs: 7060.9217. Time: 18.1918 us. Best GFLOPs: 7060.9217
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #643: GFLOPs: 7061.9561. Time: 18.1891 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #644: GFLOPs: 7053.5668. Time: 18.2107 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #645: GFLOPs: 7032.3623. Time: 18.2656 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #646: GFLOPs: 7050.1343. Time: 18.2196 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #647: GFLOPs: 7041.2831. Time: 18.2425 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #648: GFLOPs: 7021.8028. Time: 18.2931 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #649: GFLOPs: 7027.8796. Time: 18.2773 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #650: GFLOPs: 7030.9639. Time: 18.2693 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #651: GFLOPs: 7021.6613. Time: 18.2935 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #652: GFLOPs: 7040.5700. Time: 18.2443 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #653: GFLOPs: 7019.1744. Time: 18.3000 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #654: GFLOPs: 7050.9921. Time: 18.2174 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #655: GFLOPs: 7058.5303. Time: 18.1979 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #656: GFLOPs: 7018.7390. Time: 18.3011 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #657: GFLOPs: 7027.1569. Time: 18.2792 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #658: GFLOPs: 7025.5391. Time: 18.2834 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #659: GFLOPs: 7006.2697. Time: 18.3337 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #660: GFLOPs: 7056.2862. Time: 18.2037 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #661: GFLOPs: 7046.1835. Time: 18.2298 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #662: GFLOPs: 7046.1343. Time: 18.2299 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #663: GFLOPs: 6996.5128. Time: 18.3592 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #664: GFLOPs: 7061.3720. Time: 18.1906 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #665: GFLOPs: 7038.6226. Time: 18.2494 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #666: GFLOPs: 7056.3183. Time: 18.2036 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #667: GFLOPs: 7030.2405. Time: 18.2711 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #668: GFLOPs: 7016.0885. Time: 18.3080 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #669: GFLOPs: 7009.1437. Time: 18.3261 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #670: GFLOPs: 7052.3385. Time: 18.2139 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #671: GFLOPs: 7038.6378. Time: 18.2493 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #672: GFLOPs: 7037.4827. Time: 18.2523 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #673: GFLOPs: 7007.3694. Time: 18.3308 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #674: GFLOPs: 6981.2731. Time: 18.3993 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #675: GFLOPs: 6990.6494. Time: 18.3746 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #676: GFLOPs: 6979.2167. Time: 18.4047 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #677: GFLOPs: 7017.2502. Time: 18.3050 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #678: GFLOPs: 6977.1405. Time: 18.4102 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #679: GFLOPs: 6956.9906. Time: 18.4635 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #680: GFLOPs: 6984.3641. Time: 18.3912 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #681: GFLOPs: 6952.0207. Time: 18.4767 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #682: GFLOPs: 7011.5878. Time: 18.3198 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #683: GFLOPs: 7056.9072. Time: 18.2021 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #684: GFLOPs: 7045.7534. Time: 18.2309 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #685: GFLOPs: 7031.7356. Time: 18.2673 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #686: GFLOPs: 7026.1940. Time: 18.2817 us. Best GFLOPs: 7061.9561
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #687: GFLOPs: 7113.8381. Time: 18.0564 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #688: GFLOPs: 7054.4735. Time: 18.2084 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #689: GFLOPs: 7048.1816. Time: 18.2246 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #690: GFLOPs: 6957.5874. Time: 18.4619 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #691: GFLOPs: 6989.6683. Time: 18.3772 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #692: GFLOPs: 6970.6421. Time: 18.4274 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #693: GFLOPs: 6957.6816. Time: 18.4617 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #694: GFLOPs: 7042.9946. Time: 18.2381 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #695: GFLOPs: 6970.2866. Time: 18.4283 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #696: GFLOPs: 7006.6071. Time: 18.3328 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #697: GFLOPs: 6924.7424. Time: 18.5495 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #698: GFLOPs: 6879.4537. Time: 18.6716 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #699: GFLOPs: 7003.4466. Time: 18.3410 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #700: GFLOPs: 6981.0833. Time: 18.3998 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #701: GFLOPs: 2411.9059. Time: 53.2569 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #702: GFLOPs: 316.1186. Time: 406.3367 us. Best GFLOPs: 7113.8381
2023-11-11 10:18:32 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #703: GFLOPs: 3017.9422. Time: 42.5623 us. Best GFLOPs: 7113.8381
2023-11-11 10:46:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 10:46:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 10:46:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 392 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:46:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:46:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:46:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1585 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:46:41 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2023-11-11 10:47:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:47:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:47:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:48:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 10:48:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0026  1.0021  1.0017  1.0013  1.0013  1.0006  1.0006  1.0005  1.0005  1.0005  1.0004  1.0001  1.0000  0.9992  0.9992  0.9984
[17 : 32]:	0.9976  0.9975  0.9974  0.9972  0.9968  0.9967  0.9965  0.9962  0.9956  0.9954  0.9952  0.9949  0.9948  0.9946  0.9943  0.9936
[33 : 48]:	0.9931  0.9923  0.9920  0.9920  0.9917  0.9916  0.9916  0.9914  0.9912  0.9911  0.9911  0.9908  0.9906  0.9905  0.9904  0.9903
[49 : 64]:	0.9896  0.9894  0.9892  0.9891  0.9888  0.9887  0.9879  0.9873  0.9871  0.9869  0.9869  0.9867  0.9866  0.9866  0.9865  0.9862
2023-11-11 10:48:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 10:48:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #704: GFLOPs: 6854.3604. Time: 18.7400 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #705: GFLOPs: 6886.9428. Time: 18.6513 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #706: GFLOPs: 6802.1879. Time: 18.8837 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #707: GFLOPs: 6891.4186. Time: 18.6392 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #708: GFLOPs: 6888.8251. Time: 18.6462 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #709: GFLOPs: 6893.5029. Time: 18.6336 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #710: GFLOPs: 6865.0717. Time: 18.7107 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #711: GFLOPs: 6802.6146. Time: 18.8825 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #712: GFLOPs: 6797.5539. Time: 18.8966 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #713: GFLOPs: 6796.9124. Time: 18.8984 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #714: GFLOPs: 6799.0218. Time: 18.8925 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #715: GFLOPs: 6893.9201. Time: 18.6324 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #716: GFLOPs: 6797.9208. Time: 18.8956 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #717: GFLOPs: 6892.5343. Time: 18.6362 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #718: GFLOPs: 6854.8406. Time: 18.7387 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #719: GFLOPs: 6807.4263. Time: 18.8692 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #720: GFLOPs: 6807.2879. Time: 18.8696 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #721: GFLOPs: 6868.7630. Time: 18.7007 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #722: GFLOPs: 6800.3979. Time: 18.8887 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #723: GFLOPs: 6868.6133. Time: 18.7011 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #724: GFLOPs: 6845.2023. Time: 18.7650 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #725: GFLOPs: 6855.9601. Time: 18.7356 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #726: GFLOPs: 6893.0057. Time: 18.6349 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #727: GFLOPs: 6897.5815. Time: 18.6226 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #728: GFLOPs: 6871.3389. Time: 18.6937 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #729: GFLOPs: 6869.7935. Time: 18.6979 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #730: GFLOPs: 6894.5231. Time: 18.6308 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #731: GFLOPs: 6801.6830. Time: 18.8851 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #732: GFLOPs: 6879.3505. Time: 18.6719 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #733: GFLOPs: 6804.6223. Time: 18.8770 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #734: GFLOPs: 6803.8174. Time: 18.8792 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #735: GFLOPs: 6857.8630. Time: 18.7304 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #736: GFLOPs: 6896.9349. Time: 18.6243 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #737: GFLOPs: 6902.8728. Time: 18.6083 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #738: GFLOPs: 6844.1799. Time: 18.7679 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #739: GFLOPs: 6814.5785. Time: 18.8494 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #740: GFLOPs: 6848.1985. Time: 18.7568 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #741: GFLOPs: 6799.7094. Time: 18.8906 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #742: GFLOPs: 6869.7173. Time: 18.6981 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #743: GFLOPs: 6892.3924. Time: 18.6366 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #744: GFLOPs: 6891.8270. Time: 18.6381 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #745: GFLOPs: 6893.5961. Time: 18.6333 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #746: GFLOPs: 6866.3590. Time: 18.7072 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #747: GFLOPs: 6848.7847. Time: 18.7552 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #748: GFLOPs: 6807.2879. Time: 18.8696 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #749: GFLOPs: 6801.6693. Time: 18.8852 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #750: GFLOPs: 6837.7715. Time: 18.7854 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #751: GFLOPs: 6835.8702. Time: 18.7907 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #752: GFLOPs: 6855.0268. Time: 18.7382 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #753: GFLOPs: 6878.8890. Time: 18.6732 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #754: GFLOPs: 6834.0156. Time: 18.7958 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #755: GFLOPs: 6898.9036. Time: 18.6190 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #756: GFLOPs: 6894.6556. Time: 18.6305 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #757: GFLOPs: 6807.2879. Time: 18.8696 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #758: GFLOPs: 6870.9647. Time: 18.6947 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #759: GFLOPs: 6815.2061. Time: 18.8476 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #760: GFLOPs: 6858.5513. Time: 18.7285 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #761: GFLOPs: 6844.9702. Time: 18.7657 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #762: GFLOPs: 6844.3662. Time: 18.7673 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #763: GFLOPs: 6842.6931. Time: 18.7719 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #764: GFLOPs: 6902.8311. Time: 18.6084 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #765: GFLOPs: 85.1061. Time: 1509.2995 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #766: GFLOPs: 3913.1991. Time: 32.8249 us. Best GFLOPs: 7113.8381
2023-11-11 10:49:30 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #767: GFLOPs: 158.6860. Time: 809.4637 us. Best GFLOPs: 7113.8381
2023-11-11 11:01:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:01:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:01:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:01:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 793 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:01:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:02:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:02:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1988 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:02:13 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2023-11-11 11:02:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:03:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:03:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:04:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:04:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0008  0.9998  0.9983  0.9975  0.9970  0.9968  0.9968  0.9963  0.9963  0.9959  0.9957  0.9951  0.9950  0.9945  0.9945  0.9944
[17 : 32]:	0.9941  0.9937  0.9936  0.9936  0.9934  0.9933  0.9932  0.9918  0.9914  0.9914  0.9913  0.9909  0.9906  0.9905  0.9905  0.9904
[33 : 48]:	0.9902  0.9900  0.9899  0.9898  0.9889  0.9879  0.9878  0.9876  0.9867  0.9865  0.9862  0.9862  0.9862  0.9861  0.9861  0.9861
[49 : 64]:	0.9861  0.9853  0.9853  0.9852  0.9852  0.9851  0.9847  0.9847  0.9843  0.9838  0.9833  0.9829  0.9825  0.9824  0.9822  0.9819
2023-11-11 11:04:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 11:04:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #768: GFLOPs: 7012.4831. Time: 18.3174 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #769: GFLOPs: 6977.8048. Time: 18.4084 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #770: GFLOPs: 7012.1413. Time: 18.3183 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #771: GFLOPs: 6929.2814. Time: 18.5374 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #772: GFLOPs: 7005.6477. Time: 18.3353 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #773: GFLOPs: 6967.2025. Time: 18.4365 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #774: GFLOPs: 7011.8757. Time: 18.3190 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #775: GFLOPs: 6984.3442. Time: 18.3912 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #776: GFLOPs: 6983.7720. Time: 18.3927 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #777: GFLOPs: 7007.8502. Time: 18.3295 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #778: GFLOPs: 6932.2176. Time: 18.5295 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #779: GFLOPs: 7007.9811. Time: 18.3292 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #780: GFLOPs: 7004.7862. Time: 18.3375 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #781: GFLOPs: 6995.6102. Time: 18.3616 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #782: GFLOPs: 7006.3175. Time: 18.3335 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #783: GFLOPs: 7010.5334. Time: 18.3225 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #784: GFLOPs: 6899.4403. Time: 18.6175 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #785: GFLOPs: 6986.5714. Time: 18.3853 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #786: GFLOPs: 7009.3829. Time: 18.3255 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #787: GFLOPs: 7005.5036. Time: 18.3357 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #788: GFLOPs: 6962.1223. Time: 18.4499 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #789: GFLOPs: 6982.6042. Time: 18.3958 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #790: GFLOPs: 6979.0872. Time: 18.4051 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #791: GFLOPs: 7004.6422. Time: 18.3379 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #792: GFLOPs: 7013.1706. Time: 18.3156 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #793: GFLOPs: 7015.3779. Time: 18.3099 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #794: GFLOPs: 6996.9468. Time: 18.3581 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #795: GFLOPs: 6972.7753. Time: 18.4217 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #796: GFLOPs: 6910.1148. Time: 18.5888 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #797: GFLOPs: 7004.2115. Time: 18.3390 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #798: GFLOPs: 7005.5999. Time: 18.3354 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #799: GFLOPs: 6983.3179. Time: 18.3939 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #800: GFLOPs: 6933.7437. Time: 18.5254 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #801: GFLOPs: 7006.6050. Time: 18.3328 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #802: GFLOPs: 6968.4156. Time: 18.4333 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #803: GFLOPs: 6999.8601. Time: 18.3504 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #804: GFLOPs: 6952.7274. Time: 18.4748 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #805: GFLOPs: 6974.5319. Time: 18.4171 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #806: GFLOPs: 6902.9208. Time: 18.6081 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #807: GFLOPs: 7010.1977. Time: 18.3234 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #808: GFLOPs: 7004.8340. Time: 18.3374 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #809: GFLOPs: 6706.8866. Time: 19.1520 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #810: GFLOPs: 6928.0173. Time: 18.5407 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #811: GFLOPs: 6984.1266. Time: 18.3918 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #812: GFLOPs: 6992.1277. Time: 18.3707 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #813: GFLOPs: 6982.2237. Time: 18.3968 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #814: GFLOPs: 7009.8142. Time: 18.3244 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #815: GFLOPs: 7015.3300. Time: 18.3100 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #816: GFLOPs: 6921.9801. Time: 18.5569 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #817: GFLOPs: 7012.2594. Time: 18.3180 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #818: GFLOPs: 6897.9122. Time: 18.6217 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #819: GFLOPs: 6907.9932. Time: 18.5945 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #820: GFLOPs: 7005.1109. Time: 18.3367 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #821: GFLOPs: 6952.1688. Time: 18.4763 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #822: GFLOPs: 7014.4352. Time: 18.3123 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #823: GFLOPs: 6886.2805. Time: 18.6531 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #824: GFLOPs: 7006.9882. Time: 18.3318 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #825: GFLOPs: 6936.2081. Time: 18.5188 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #826: GFLOPs: 7003.7463. Time: 18.3403 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #827: GFLOPs: 6901.4077. Time: 18.6122 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #828: GFLOPs: 6983.2578. Time: 18.3941 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #829: GFLOPs: 430.8761. Time: 298.1148 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #830: GFLOPs: 179.3149. Time: 716.3408 us. Best GFLOPs: 7113.8381
2023-11-11 11:05:11 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #831: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(12544))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(588))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(588) // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(16), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 2, 1, 16, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 49, 2, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
l118 = sch.fuse(l89, preserve_unit_iters=True)
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l118, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b96)
l135, l136 = sch.split(loop=l134, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b107)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2023-11-11 11:20:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:20:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:20:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:20:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:20:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:21:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:21:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:21:11 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2023-11-11 11:21:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:22:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:22:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:23:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:23:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0019  1.0001  1.0001  0.9992  0.9978  0.9976  0.9976  0.9971  0.9969  0.9968  0.9967  0.9964  0.9963  0.9958  0.9954  0.9952
[17 : 32]:	0.9952  0.9949  0.9938  0.9935  0.9933  0.9933  0.9931  0.9928  0.9927  0.9925  0.9921  0.9917  0.9912  0.9910  0.9909  0.9909
[33 : 48]:	0.9904  0.9904  0.9900  0.9900  0.9896  0.9891  0.9891  0.9891  0.9888  0.9885  0.9885  0.9884  0.9882  0.9882  0.9880  0.9880
[49 : 64]:	0.9878  0.9878  0.9877  0.9877  0.9876  0.9875  0.9873  0.9873  0.9871  0.9869  0.9866  0.9865  0.9865  0.9862  0.9862  0.9862
2023-11-11 11:23:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 11:23:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #832: GFLOPs: 6894.2258. Time: 18.6316 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #833: GFLOPs: 6947.9408. Time: 18.4876 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #834: GFLOPs: 6947.0276. Time: 18.4900 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #835: GFLOPs: 6953.4820. Time: 18.4728 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #836: GFLOPs: 6893.4771. Time: 18.6336 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #837: GFLOPs: 6880.2522. Time: 18.6695 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #838: GFLOPs: 6879.6758. Time: 18.6710 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #839: GFLOPs: 6880.3460. Time: 18.6692 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #840: GFLOPs: 6879.4537. Time: 18.6716 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #841: GFLOPs: 6889.1888. Time: 18.6452 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #842: GFLOPs: 6904.0081. Time: 18.6052 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #843: GFLOPs: 6904.8301. Time: 18.6030 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #844: GFLOPs: 6880.5969. Time: 18.6685 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #845: GFLOPs: 6892.4837. Time: 18.6363 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #846: GFLOPs: 6931.9788. Time: 18.5301 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #847: GFLOPs: 6934.4682. Time: 18.5235 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #848: GFLOPs: 6918.3879. Time: 18.5665 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #849: GFLOPs: 6880.2522. Time: 18.6695 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #850: GFLOPs: 6889.1418. Time: 18.6454 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #851: GFLOPs: 6882.6754. Time: 18.6629 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #852: GFLOPs: 6955.9352. Time: 18.4663 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #853: GFLOPs: 6878.8890. Time: 18.6732 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #854: GFLOPs: 6945.0517. Time: 18.4953 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #855: GFLOPs: 6929.2623. Time: 18.5374 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #856: GFLOPs: 6903.9609. Time: 18.6053 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #857: GFLOPs: 6893.0057. Time: 18.6349 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #858: GFLOPs: 6881.3359. Time: 18.6665 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #859: GFLOPs: 6901.3133. Time: 18.6125 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #860: GFLOPs: 6945.6630. Time: 18.4936 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #861: GFLOPs: 6907.4350. Time: 18.5960 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #862: GFLOPs: 6890.3994. Time: 18.6420 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #863: GFLOPs: 6953.1988. Time: 18.4736 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #864: GFLOPs: 6880.3929. Time: 18.6691 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #865: GFLOPs: 6876.1684. Time: 18.6805 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #866: GFLOPs: 6946.2652. Time: 18.4920 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #867: GFLOPs: 6942.9824. Time: 18.5008 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #868: GFLOPs: 6930.9677. Time: 18.5328 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #869: GFLOPs: 6953.5291. Time: 18.4727 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #870: GFLOPs: 6955.4634. Time: 18.4676 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #871: GFLOPs: 6887.7287. Time: 18.6492 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #872: GFLOPs: 6931.5497. Time: 18.5313 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #873: GFLOPs: 6944.2050. Time: 18.4975 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #874: GFLOPs: 6904.8123. Time: 18.6030 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #875: GFLOPs: 6953.6710. Time: 18.4723 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #876: GFLOPs: 6884.9859. Time: 18.6566 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #877: GFLOPs: 6903.3456. Time: 18.6070 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #878: GFLOPs: 6903.7839. Time: 18.6058 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #879: GFLOPs: 6944.2520. Time: 18.4974 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #880: GFLOPs: 6749.0923. Time: 19.0323 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #881: GFLOPs: 6879.5482. Time: 18.6714 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #882: GFLOPs: 6916.3744. Time: 18.5719 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #883: GFLOPs: 6900.4155. Time: 18.6149 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #884: GFLOPs: 6955.3685. Time: 18.4678 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #885: GFLOPs: 6878.2328. Time: 18.6749 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #886: GFLOPs: 6749.2306. Time: 19.0319 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #887: GFLOPs: 6930.4993. Time: 18.5341 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #888: GFLOPs: 6929.4216. Time: 18.5370 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #889: GFLOPs: 6888.9645. Time: 18.6458 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #890: GFLOPs: 6886.4109. Time: 18.6528 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #891: GFLOPs: 6884.5295. Time: 18.6579 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #892: GFLOPs: 6888.6239. Time: 18.6468 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #893: GFLOPs: 2600.5983. Time: 49.3927 us. Best GFLOPs: 7113.8381
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #894: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(98), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(3) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(49)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2352))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2352) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(2), T.int64(98), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(3) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(4) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(98)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, v_h, v_w])
                        T.writes(T_add[v_n, v_co, v_h, v_w])
                        T_add[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, v_h, v_w]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
b6, b7 = sch.get_producers(block=b2)
sch.compute_inline(block=b7)
b8, = sch.get_consumers(block=b2)
l9, l10, l11, l12 = sch.get_loops(block=b8)
l13, l14 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l13, l15, l14, l16)
sch.compute_at(block=b2, loop=l15, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l17, l18, l19, l20, l21, l22, l23, l24, l25, l26 = sch.get_loops(block=b2)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
b27, b28 = sch.get_producers(block=b0)
sch.compute_inline(block=b28)
b29, = sch.get_producers(block=b27)
l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b0)
sch.reorder(l32, l33, l30, l31, l34, l35)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l34)
sch.unroll(loop=l35)
l36 = sch.fuse(l32, l33, preserve_unit_iters=True)
v37 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l38, l39 = sch.split(loop=l36, factors=[None, v37], preserve_unit_iters=True)
sch.bind(loop=l38, thread_axis="blockIdx.x")
sch.bind(loop=l39, thread_axis="threadIdx.x")
b40 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b40, loop=l39, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b27, loop=l39, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b27, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b29)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l41, l42, l43, l44, l45 = sch.get_loops(block=b1)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l41, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58, v59, v60 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l61, l62, l63, l64, l65 = sch.split(loop=l42, factors=[v56, v57, v58, v59, v60], preserve_unit_iters=True)
v66, v67, v68, v69, v70 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 16, 2, 1])
l71, l72, l73, l74, l75 = sch.split(loop=l43, factors=[v66, v67, v68, v69, v70], preserve_unit_iters=True)
v76, v77, v78, v79, v80 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 1, 98, 1])
l81, l82, l83, l84, l85 = sch.split(loop=l44, factors=[v76, v77, v78, v79, v80], preserve_unit_iters=True)
v86, v87, v88 = sch.sample_perfect_tile(loop=l45, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l89, l90, l91 = sch.split(loop=l45, factors=[v86, v87, v88], preserve_unit_iters=True)
sch.reorder(l51, l61, l71, l81, l52, l62, l72, l82, l53, l63, l73, l83, l89, l90, l54, l64, l74, l84, l91, l55, l65, l75, l85)
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="blockIdx.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="vthread.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b95 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b95, loop=l94, preserve_unit_loops=True, index=-1)
b96 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b96, loop=l89, preserve_unit_loops=True, index=-1)
l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b96)
l105 = sch.fuse(l101, l102, l103, l104, preserve_unit_iters=True)
v106 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch", ann_val=v106)
b107 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b107, loop=l89, preserve_unit_loops=True, index=-1)
l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b107)
l116 = sch.fuse(l112, l113, l114, l115, preserve_unit_iters=True)
v117 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch", ann_val=v117)
sch.reverse_compute_inline(block=b4)
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b96)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b107)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2023-11-11 11:24:13 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #895: GFLOPs: 2577.0677. Time: 49.8437 us. Best GFLOPs: 7113.8381
2023-11-11 11:31:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:31:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:32:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:32:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 791 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:32:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1188 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:32:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:32:26 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2023-11-11 11:32:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:33:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:33:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:34:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:34:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0010  0.9992  0.9977  0.9976  0.9974  0.9971  0.9971  0.9967  0.9967  0.9958  0.9955  0.9953  0.9948  0.9947  0.9944  0.9943
[17 : 32]:	0.9942  0.9941  0.9940  0.9929  0.9929  0.9922  0.9914  0.9904  0.9901  0.9878  0.9874  0.9872  0.9864  0.9864  0.9862  0.9862
[33 : 48]:	0.9861  0.9860  0.9858  0.9857  0.9852  0.9849  0.9849  0.9849  0.9848  0.9847  0.9847  0.9847  0.9843  0.9839  0.9839  0.9838
[49 : 64]:	0.9834  0.9828  0.9828  0.9827  0.9827  0.9826  0.9825  0.9825  0.9823  0.9822  0.9821  0.9821  0.9819  0.9819  0.9816  0.9811
2023-11-11 11:34:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-11-11 11:34:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #896: GFLOPs: 7062.6853. Time: 18.1872 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #897: GFLOPs: 7056.8596. Time: 18.2022 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #898: GFLOPs: 7040.4743. Time: 18.2446 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #899: GFLOPs: 6994.5599. Time: 18.3644 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #900: GFLOPs: 7021.8152. Time: 18.2931 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #901: GFLOPs: 7034.8232. Time: 18.2592 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #902: GFLOPs: 7033.1649. Time: 18.2636 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #903: GFLOPs: 6987.7015. Time: 18.3824 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #904: GFLOPs: 6989.9826. Time: 18.3764 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #905: GFLOPs: 7015.7620. Time: 18.3089 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #906: GFLOPs: 6950.9365. Time: 18.4796 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #907: GFLOPs: 7033.7130. Time: 18.2621 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #908: GFLOPs: 6986.2510. Time: 18.3862 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #909: GFLOPs: 7014.8746. Time: 18.3112 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #910: GFLOPs: 7033.8765. Time: 18.2617 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #911: GFLOPs: 7065.1753. Time: 18.1808 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #912: GFLOPs: 6974.5775. Time: 18.4170 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #913: GFLOPs: 7061.9231. Time: 18.1892 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #914: GFLOPs: 7021.3302. Time: 18.2943 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #915: GFLOPs: 6949.7114. Time: 18.4829 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #916: GFLOPs: 6989.9488. Time: 18.3765 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #917: GFLOPs: 7018.6910. Time: 18.3012 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #918: GFLOPs: 7059.7724. Time: 18.1947 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #919: GFLOPs: 6949.9943. Time: 18.4821 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #920: GFLOPs: 7017.8263. Time: 18.3035 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #921: GFLOPs: 6982.2237. Time: 18.3968 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #922: GFLOPs: 7057.3369. Time: 18.2010 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #923: GFLOPs: 6935.7599. Time: 18.5200 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #924: GFLOPs: 6946.4161. Time: 18.4916 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #925: GFLOPs: 6976.7606. Time: 18.4112 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #926: GFLOPs: 7039.6049. Time: 18.2468 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #927: GFLOPs: 6937.6266. Time: 18.5151 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #928: GFLOPs: 6998.5708. Time: 18.3538 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #929: GFLOPs: 7039.2872. Time: 18.2477 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #930: GFLOPs: 7030.7950. Time: 18.2697 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #931: GFLOPs: 7011.2519. Time: 18.3206 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #932: GFLOPs: 6956.7847. Time: 18.4641 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #933: GFLOPs: 7018.5386. Time: 18.3016 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #934: GFLOPs: 6986.2510. Time: 18.3862 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #935: GFLOPs: 7006.0308. Time: 18.3343 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #936: GFLOPs: 7020.2772. Time: 18.2971 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #937: GFLOPs: 7021.0465. Time: 18.2951 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #938: GFLOPs: 7022.3448. Time: 18.2917 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #939: GFLOPs: 6954.0006. Time: 18.4715 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #940: GFLOPs: 7032.2178. Time: 18.2660 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #941: GFLOPs: 7056.2698. Time: 18.2037 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #942: GFLOPs: 7055.7358. Time: 18.2051 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #943: GFLOPs: 7010.1498. Time: 18.3235 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #944: GFLOPs: 7050.7870. Time: 18.2179 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #945: GFLOPs: 7030.8676. Time: 18.2695 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #946: GFLOPs: 7018.1148. Time: 18.3027 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #947: GFLOPs: 7067.2815. Time: 18.1754 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #948: GFLOPs: 7035.7403. Time: 18.2569 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #949: GFLOPs: 7017.5865. Time: 18.3041 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #950: GFLOPs: 6850.4866. Time: 18.7506 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #951: GFLOPs: 6950.5594. Time: 18.4806 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #952: GFLOPs: 6986.9817. Time: 18.3843 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #953: GFLOPs: 7011.6356. Time: 18.3196 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #954: GFLOPs: 6998.7139. Time: 18.3535 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #955: GFLOPs: 6935.1401. Time: 18.5217 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #956: GFLOPs: 6981.4629. Time: 18.3988 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #957: GFLOPs: 85.8967. Time: 1495.4068 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #958: GFLOPs: 833.6347. Time: 154.0850 us. Best GFLOPs: 7113.8381
2023-11-11 11:34:59 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #959: GFLOPs: 588.0986. Time: 218.4167 us. Best GFLOPs: 7113.8381
2023-11-11 11:39:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-11 11:39:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-11-11 11:39:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:39:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:39:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:40:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 1589 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:40:04 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2023-11-11 11:40:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:40:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:41:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:41:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x56310dcde7c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x56310dc49188)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x56310e896098)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56310e460f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x56310b3679b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x56310e891048)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x56310e890da8)]: 0 failure(s)
2023-11-11 11:41:59 [INFO] [evolutionary_search.cc:649] Scores of the best 41 candidates:
[1 : 16]:	1.0013  1.0013  1.0006  1.0005  1.0004  1.0003  0.9997  0.9997  0.9997  0.9991  0.9990  0.9987  0.9983  0.9981  0.9981  0.9979
[17 : 32]:	0.9979  0.9978  0.9975  0.9972  0.9970  0.9970  0.9968  0.9968  0.9966  0.9963  0.9960  0.9960  0.9957  0.9952  0.9951  0.9949
[33 : 41]:	0.9943  0.9939  0.9939  0.9939  0.9938  0.9934  0.9934  0.9933  0.9929
2023-11-11 11:42:00 [INFO] [evolutionary_search.cc:727] Got 41 candidate(s) with evolutionary search
2023-11-11 11:42:00 [INFO] [evolutionary_search.cc:730] Sending 41 candidates(s) for measurement
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #960: GFLOPs: 7084.0792. Time: 18.1323 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #961: GFLOPs: 7082.9253. Time: 18.1352 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #962: GFLOPs: 7062.0533. Time: 18.1888 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #963: GFLOPs: 7017.1063. Time: 18.3053 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #964: GFLOPs: 7030.3686. Time: 18.2708 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #965: GFLOPs: 7070.4914. Time: 18.1671 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #966: GFLOPs: 7060.8241. Time: 18.1920 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #967: GFLOPs: 7060.3940. Time: 18.1931 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #968: GFLOPs: 7071.5992. Time: 18.1643 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #969: GFLOPs: 7056.5252. Time: 18.2031 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #970: GFLOPs: 7010.4304. Time: 18.3228 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #971: GFLOPs: 7069.7125. Time: 18.1691 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #972: GFLOPs: 7078.8393. Time: 18.1457 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #973: GFLOPs: 7046.7651. Time: 18.2283 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #974: GFLOPs: 7081.5310. Time: 18.1388 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #975: GFLOPs: 7062.0663. Time: 18.1888 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #976: GFLOPs: 7069.6289. Time: 18.1693 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #977: GFLOPs: 7057.6782. Time: 18.2001 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #978: GFLOPs: 7077.7350. Time: 18.1485 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #979: GFLOPs: 7046.6102. Time: 18.2287 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #980: GFLOPs: 7076.5344. Time: 18.1516 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #981: GFLOPs: 7062.4967. Time: 18.1877 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #982: GFLOPs: 7076.1503. Time: 18.1526 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #983: GFLOPs: 7060.8372. Time: 18.1920 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #984: GFLOPs: 7063.5126. Time: 18.1851 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #985: GFLOPs: 7046.8134. Time: 18.2282 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #986: GFLOPs: 7081.1943. Time: 18.1397 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #987: GFLOPs: 7052.0888. Time: 18.2145 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #988: GFLOPs: 7075.9107. Time: 18.1532 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #989: GFLOPs: 7034.4928. Time: 18.2601 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #990: GFLOPs: 7081.2903. Time: 18.1394 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #991: GFLOPs: 7045.5159. Time: 18.2315 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #992: GFLOPs: 7002.9946. Time: 18.3422 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #993: GFLOPs: 7054.0574. Time: 18.2095 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #994: GFLOPs: 7048.1697. Time: 18.2247 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #995: GFLOPs: 7063.7396. Time: 18.1845 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #996: GFLOPs: 7076.6303. Time: 18.1514 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #997: GFLOPs: 7054.8072. Time: 18.2075 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #998: GFLOPs: 7078.8880. Time: 18.1456 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #999: GFLOPs: 2322.7220. Time: 55.3017 us. Best GFLOPs: 7113.8381
2023-11-11 11:42:27 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_conv2d_winograd_without_weight_transform_add] Trial #1000: GFLOPs: 4432.3560. Time: 28.9802 us. Best GFLOPs: 7113.8381
