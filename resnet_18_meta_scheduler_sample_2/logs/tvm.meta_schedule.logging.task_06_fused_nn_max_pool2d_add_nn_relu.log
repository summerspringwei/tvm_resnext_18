2023-11-10 22:04:22 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_max_pool2d_add_nn_relu"
2023-11-10 22:04:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        pool_max = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = pool_max[v_ax0, v_ax1, v_ax2, v_ax3] + p1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2023-11-10 22:04:22 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2023-11-10 22:04:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            pool_max = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3] + p1[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.reverse_compute_inline(block=b3)
sch.compute_inline(block=b0)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7, l8, l9 = sch.get_loops(block=b2)
l10 = sch.fuse(l6, l7, l8, l9, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
v21 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l22, l23 = sch.split(loop=l20, factors=[None, v21], preserve_unit_iters=True)
sch.bind(loop=l22, thread_axis="blockIdx.x")
sch.bind(loop=l23, thread_axis="threadIdx.x")
2023-11-10 22:04:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            pool_max_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(14336), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_0_fused // T.int64(224) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_0_fused % T.int64(224) // T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_0_fused % T.int64(4) * T.int64(16) + ax3)
                            v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(3))
                            T.where(ax0_ax1_ax2_ax3_0_fused % T.int64(4) * T.int64(16) + ax3 < T.int64(56) and ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_0_fused // T.int64(224))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_0_fused % T.int64(224) // T.int64(4))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_0_fused % T.int64(4) * T.int64(16) + ax3_1)
                        T.where(ax0_ax1_ax2_ax3_0_fused % T.int64(4) * T.int64(16) + ax3_1 < T.int64(56))
                        T.reads(pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3], p1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p1[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.reverse_compute_inline(block=b3)
sch.compute_inline(block=b0)
b5, = sch.get_consumers(block=b1)
l6, l7, l8, l9 = sch.get_loops(block=b5)
v10 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l11, l12 = sch.split(loop=l9, factors=[None, v10], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
sch.compute_at(block=b1, loop=l11, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b1, buffer_index=0, storage_scope="shared")
l13, l14, l15, l16, l17, l18, l19, l20, l21, l22 = sch.get_loops(block=b1)
l23 = sch.fuse(l21, l22, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, v10], preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="threadIdx.x")
v26 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v26)
l27, l28, l29, l30, l31 = sch.get_loops(block=b2)
l32 = sch.fuse(l27, l28, l29, l30, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="blockIdx.x")
2023-11-10 22:07:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-11-10 22:07:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-11-10 22:07:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55e12ad5ab98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55e12b2ea078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55e12b2ead48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55e12b22de08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55e127770088)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55e12be3e668)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55e12be7ca78)]: 0 failure(s)
2023-11-10 22:07:13 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-11-10 22:07:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55e12ad5ab98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55e12b2ea078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55e12b2ead48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55e12b22de08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55e127770088)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55e12be3e668)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55e12be7ca78)]: 0 failure(s)
2023-11-10 22:07:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55e12ad5ab98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55e12b2ea078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55e12b2ead48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55e12b22de08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55e127770088)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55e12be3e668)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55e12be7ca78)]: 0 failure(s)
2023-11-10 22:07:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55e12ad5ab98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55e12b2ea078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55e12b2ead48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55e12b22de08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55e127770088)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55e12be3e668)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55e12be7ca78)]: 0 failure(s)
2023-11-10 22:07:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55e12ad5ab98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55e12b2ea078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55e12b2ead48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55e12b22de08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55e127770088)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55e12be3e668)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55e12be7ca78)]: 0 failure(s)
2023-11-10 22:07:19 [INFO] [evolutionary_search.cc:649] Scores of the best 2 candidates:
[1 : 2]:	0.9991  0.9930
2023-11-10 22:07:19 [INFO] [evolutionary_search.cc:727] Got 2 candidate(s) with evolutionary search
2023-11-10 22:07:19 [INFO] [evolutionary_search.cc:730] Sending 2 candidates(s) for measurement
2023-11-10 22:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d_add_nn_relu] Trial #1: GFLOPs: 78.9449. Time: 27.9656 us. Best GFLOPs: 78.9449
2023-11-10 22:32:09 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_max_pool2d_add_nn_relu] Trial #2: GFLOPs: 261.5399. Time: 8.4413 us. Best GFLOPs: 261.5399
